/* automatically generated by rust-bindgen */

#[derive(Copy, Debug)]
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
pub const __PGMSPACE_H_: ::std::os::raw::c_uint = 1;
pub const B0: ::std::os::raw::c_uint = 0;
pub const B00: ::std::os::raw::c_uint = 0;
pub const B000: ::std::os::raw::c_uint = 0;
pub const B0000: ::std::os::raw::c_uint = 0;
pub const B00000: ::std::os::raw::c_uint = 0;
pub const B000000: ::std::os::raw::c_uint = 0;
pub const B0000000: ::std::os::raw::c_uint = 0;
pub const B00000000: ::std::os::raw::c_uint = 0;
pub const B1: ::std::os::raw::c_uint = 1;
pub const B01: ::std::os::raw::c_uint = 1;
pub const B001: ::std::os::raw::c_uint = 1;
pub const B0001: ::std::os::raw::c_uint = 1;
pub const B00001: ::std::os::raw::c_uint = 1;
pub const B000001: ::std::os::raw::c_uint = 1;
pub const B0000001: ::std::os::raw::c_uint = 1;
pub const B00000001: ::std::os::raw::c_uint = 1;
pub const B10: ::std::os::raw::c_uint = 2;
pub const B010: ::std::os::raw::c_uint = 2;
pub const B0010: ::std::os::raw::c_uint = 2;
pub const B00010: ::std::os::raw::c_uint = 2;
pub const B000010: ::std::os::raw::c_uint = 2;
pub const B0000010: ::std::os::raw::c_uint = 2;
pub const B00000010: ::std::os::raw::c_uint = 2;
pub const B11: ::std::os::raw::c_uint = 3;
pub const B011: ::std::os::raw::c_uint = 3;
pub const B0011: ::std::os::raw::c_uint = 3;
pub const B00011: ::std::os::raw::c_uint = 3;
pub const B000011: ::std::os::raw::c_uint = 3;
pub const B0000011: ::std::os::raw::c_uint = 3;
pub const B00000011: ::std::os::raw::c_uint = 3;
pub const B100: ::std::os::raw::c_uint = 4;
pub const B0100: ::std::os::raw::c_uint = 4;
pub const B00100: ::std::os::raw::c_uint = 4;
pub const B000100: ::std::os::raw::c_uint = 4;
pub const B0000100: ::std::os::raw::c_uint = 4;
pub const B00000100: ::std::os::raw::c_uint = 4;
pub const B101: ::std::os::raw::c_uint = 5;
pub const B0101: ::std::os::raw::c_uint = 5;
pub const B00101: ::std::os::raw::c_uint = 5;
pub const B000101: ::std::os::raw::c_uint = 5;
pub const B0000101: ::std::os::raw::c_uint = 5;
pub const B00000101: ::std::os::raw::c_uint = 5;
pub const B110: ::std::os::raw::c_uint = 6;
pub const B0110: ::std::os::raw::c_uint = 6;
pub const B00110: ::std::os::raw::c_uint = 6;
pub const B000110: ::std::os::raw::c_uint = 6;
pub const B0000110: ::std::os::raw::c_uint = 6;
pub const B00000110: ::std::os::raw::c_uint = 6;
pub const B111: ::std::os::raw::c_uint = 7;
pub const B0111: ::std::os::raw::c_uint = 7;
pub const B00111: ::std::os::raw::c_uint = 7;
pub const B000111: ::std::os::raw::c_uint = 7;
pub const B0000111: ::std::os::raw::c_uint = 7;
pub const B00000111: ::std::os::raw::c_uint = 7;
pub const B1000: ::std::os::raw::c_uint = 8;
pub const B01000: ::std::os::raw::c_uint = 8;
pub const B001000: ::std::os::raw::c_uint = 8;
pub const B0001000: ::std::os::raw::c_uint = 8;
pub const B00001000: ::std::os::raw::c_uint = 8;
pub const B1001: ::std::os::raw::c_uint = 9;
pub const B01001: ::std::os::raw::c_uint = 9;
pub const B001001: ::std::os::raw::c_uint = 9;
pub const B0001001: ::std::os::raw::c_uint = 9;
pub const B00001001: ::std::os::raw::c_uint = 9;
pub const B1010: ::std::os::raw::c_uint = 10;
pub const B01010: ::std::os::raw::c_uint = 10;
pub const B001010: ::std::os::raw::c_uint = 10;
pub const B0001010: ::std::os::raw::c_uint = 10;
pub const B00001010: ::std::os::raw::c_uint = 10;
pub const B1011: ::std::os::raw::c_uint = 11;
pub const B01011: ::std::os::raw::c_uint = 11;
pub const B001011: ::std::os::raw::c_uint = 11;
pub const B0001011: ::std::os::raw::c_uint = 11;
pub const B00001011: ::std::os::raw::c_uint = 11;
pub const B1100: ::std::os::raw::c_uint = 12;
pub const B01100: ::std::os::raw::c_uint = 12;
pub const B001100: ::std::os::raw::c_uint = 12;
pub const B0001100: ::std::os::raw::c_uint = 12;
pub const B00001100: ::std::os::raw::c_uint = 12;
pub const B1101: ::std::os::raw::c_uint = 13;
pub const B01101: ::std::os::raw::c_uint = 13;
pub const B001101: ::std::os::raw::c_uint = 13;
pub const B0001101: ::std::os::raw::c_uint = 13;
pub const B00001101: ::std::os::raw::c_uint = 13;
pub const B1110: ::std::os::raw::c_uint = 14;
pub const B01110: ::std::os::raw::c_uint = 14;
pub const B001110: ::std::os::raw::c_uint = 14;
pub const B0001110: ::std::os::raw::c_uint = 14;
pub const B00001110: ::std::os::raw::c_uint = 14;
pub const B1111: ::std::os::raw::c_uint = 15;
pub const B01111: ::std::os::raw::c_uint = 15;
pub const B001111: ::std::os::raw::c_uint = 15;
pub const B0001111: ::std::os::raw::c_uint = 15;
pub const B00001111: ::std::os::raw::c_uint = 15;
pub const B10000: ::std::os::raw::c_uint = 16;
pub const B010000: ::std::os::raw::c_uint = 16;
pub const B0010000: ::std::os::raw::c_uint = 16;
pub const B00010000: ::std::os::raw::c_uint = 16;
pub const B10001: ::std::os::raw::c_uint = 17;
pub const B010001: ::std::os::raw::c_uint = 17;
pub const B0010001: ::std::os::raw::c_uint = 17;
pub const B00010001: ::std::os::raw::c_uint = 17;
pub const B10010: ::std::os::raw::c_uint = 18;
pub const B010010: ::std::os::raw::c_uint = 18;
pub const B0010010: ::std::os::raw::c_uint = 18;
pub const B00010010: ::std::os::raw::c_uint = 18;
pub const B10011: ::std::os::raw::c_uint = 19;
pub const B010011: ::std::os::raw::c_uint = 19;
pub const B0010011: ::std::os::raw::c_uint = 19;
pub const B00010011: ::std::os::raw::c_uint = 19;
pub const B10100: ::std::os::raw::c_uint = 20;
pub const B010100: ::std::os::raw::c_uint = 20;
pub const B0010100: ::std::os::raw::c_uint = 20;
pub const B00010100: ::std::os::raw::c_uint = 20;
pub const B10101: ::std::os::raw::c_uint = 21;
pub const B010101: ::std::os::raw::c_uint = 21;
pub const B0010101: ::std::os::raw::c_uint = 21;
pub const B00010101: ::std::os::raw::c_uint = 21;
pub const B10110: ::std::os::raw::c_uint = 22;
pub const B010110: ::std::os::raw::c_uint = 22;
pub const B0010110: ::std::os::raw::c_uint = 22;
pub const B00010110: ::std::os::raw::c_uint = 22;
pub const B10111: ::std::os::raw::c_uint = 23;
pub const B010111: ::std::os::raw::c_uint = 23;
pub const B0010111: ::std::os::raw::c_uint = 23;
pub const B00010111: ::std::os::raw::c_uint = 23;
pub const B11000: ::std::os::raw::c_uint = 24;
pub const B011000: ::std::os::raw::c_uint = 24;
pub const B0011000: ::std::os::raw::c_uint = 24;
pub const B00011000: ::std::os::raw::c_uint = 24;
pub const B11001: ::std::os::raw::c_uint = 25;
pub const B011001: ::std::os::raw::c_uint = 25;
pub const B0011001: ::std::os::raw::c_uint = 25;
pub const B00011001: ::std::os::raw::c_uint = 25;
pub const B11010: ::std::os::raw::c_uint = 26;
pub const B011010: ::std::os::raw::c_uint = 26;
pub const B0011010: ::std::os::raw::c_uint = 26;
pub const B00011010: ::std::os::raw::c_uint = 26;
pub const B11011: ::std::os::raw::c_uint = 27;
pub const B011011: ::std::os::raw::c_uint = 27;
pub const B0011011: ::std::os::raw::c_uint = 27;
pub const B00011011: ::std::os::raw::c_uint = 27;
pub const B11100: ::std::os::raw::c_uint = 28;
pub const B011100: ::std::os::raw::c_uint = 28;
pub const B0011100: ::std::os::raw::c_uint = 28;
pub const B00011100: ::std::os::raw::c_uint = 28;
pub const B11101: ::std::os::raw::c_uint = 29;
pub const B011101: ::std::os::raw::c_uint = 29;
pub const B0011101: ::std::os::raw::c_uint = 29;
pub const B00011101: ::std::os::raw::c_uint = 29;
pub const B11110: ::std::os::raw::c_uint = 30;
pub const B011110: ::std::os::raw::c_uint = 30;
pub const B0011110: ::std::os::raw::c_uint = 30;
pub const B00011110: ::std::os::raw::c_uint = 30;
pub const B11111: ::std::os::raw::c_uint = 31;
pub const B011111: ::std::os::raw::c_uint = 31;
pub const B0011111: ::std::os::raw::c_uint = 31;
pub const B00011111: ::std::os::raw::c_uint = 31;
pub const B100000: ::std::os::raw::c_uint = 32;
pub const B0100000: ::std::os::raw::c_uint = 32;
pub const B00100000: ::std::os::raw::c_uint = 32;
pub const B100001: ::std::os::raw::c_uint = 33;
pub const B0100001: ::std::os::raw::c_uint = 33;
pub const B00100001: ::std::os::raw::c_uint = 33;
pub const B100010: ::std::os::raw::c_uint = 34;
pub const B0100010: ::std::os::raw::c_uint = 34;
pub const B00100010: ::std::os::raw::c_uint = 34;
pub const B100011: ::std::os::raw::c_uint = 35;
pub const B0100011: ::std::os::raw::c_uint = 35;
pub const B00100011: ::std::os::raw::c_uint = 35;
pub const B100100: ::std::os::raw::c_uint = 36;
pub const B0100100: ::std::os::raw::c_uint = 36;
pub const B00100100: ::std::os::raw::c_uint = 36;
pub const B100101: ::std::os::raw::c_uint = 37;
pub const B0100101: ::std::os::raw::c_uint = 37;
pub const B00100101: ::std::os::raw::c_uint = 37;
pub const B100110: ::std::os::raw::c_uint = 38;
pub const B0100110: ::std::os::raw::c_uint = 38;
pub const B00100110: ::std::os::raw::c_uint = 38;
pub const B100111: ::std::os::raw::c_uint = 39;
pub const B0100111: ::std::os::raw::c_uint = 39;
pub const B00100111: ::std::os::raw::c_uint = 39;
pub const B101000: ::std::os::raw::c_uint = 40;
pub const B0101000: ::std::os::raw::c_uint = 40;
pub const B00101000: ::std::os::raw::c_uint = 40;
pub const B101001: ::std::os::raw::c_uint = 41;
pub const B0101001: ::std::os::raw::c_uint = 41;
pub const B00101001: ::std::os::raw::c_uint = 41;
pub const B101010: ::std::os::raw::c_uint = 42;
pub const B0101010: ::std::os::raw::c_uint = 42;
pub const B00101010: ::std::os::raw::c_uint = 42;
pub const B101011: ::std::os::raw::c_uint = 43;
pub const B0101011: ::std::os::raw::c_uint = 43;
pub const B00101011: ::std::os::raw::c_uint = 43;
pub const B101100: ::std::os::raw::c_uint = 44;
pub const B0101100: ::std::os::raw::c_uint = 44;
pub const B00101100: ::std::os::raw::c_uint = 44;
pub const B101101: ::std::os::raw::c_uint = 45;
pub const B0101101: ::std::os::raw::c_uint = 45;
pub const B00101101: ::std::os::raw::c_uint = 45;
pub const B101110: ::std::os::raw::c_uint = 46;
pub const B0101110: ::std::os::raw::c_uint = 46;
pub const B00101110: ::std::os::raw::c_uint = 46;
pub const B101111: ::std::os::raw::c_uint = 47;
pub const B0101111: ::std::os::raw::c_uint = 47;
pub const B00101111: ::std::os::raw::c_uint = 47;
pub const B110000: ::std::os::raw::c_uint = 48;
pub const B0110000: ::std::os::raw::c_uint = 48;
pub const B00110000: ::std::os::raw::c_uint = 48;
pub const B110001: ::std::os::raw::c_uint = 49;
pub const B0110001: ::std::os::raw::c_uint = 49;
pub const B00110001: ::std::os::raw::c_uint = 49;
pub const B110010: ::std::os::raw::c_uint = 50;
pub const B0110010: ::std::os::raw::c_uint = 50;
pub const B00110010: ::std::os::raw::c_uint = 50;
pub const B110011: ::std::os::raw::c_uint = 51;
pub const B0110011: ::std::os::raw::c_uint = 51;
pub const B00110011: ::std::os::raw::c_uint = 51;
pub const B110100: ::std::os::raw::c_uint = 52;
pub const B0110100: ::std::os::raw::c_uint = 52;
pub const B00110100: ::std::os::raw::c_uint = 52;
pub const B110101: ::std::os::raw::c_uint = 53;
pub const B0110101: ::std::os::raw::c_uint = 53;
pub const B00110101: ::std::os::raw::c_uint = 53;
pub const B110110: ::std::os::raw::c_uint = 54;
pub const B0110110: ::std::os::raw::c_uint = 54;
pub const B00110110: ::std::os::raw::c_uint = 54;
pub const B110111: ::std::os::raw::c_uint = 55;
pub const B0110111: ::std::os::raw::c_uint = 55;
pub const B00110111: ::std::os::raw::c_uint = 55;
pub const B111000: ::std::os::raw::c_uint = 56;
pub const B0111000: ::std::os::raw::c_uint = 56;
pub const B00111000: ::std::os::raw::c_uint = 56;
pub const B111001: ::std::os::raw::c_uint = 57;
pub const B0111001: ::std::os::raw::c_uint = 57;
pub const B00111001: ::std::os::raw::c_uint = 57;
pub const B111010: ::std::os::raw::c_uint = 58;
pub const B0111010: ::std::os::raw::c_uint = 58;
pub const B00111010: ::std::os::raw::c_uint = 58;
pub const B111011: ::std::os::raw::c_uint = 59;
pub const B0111011: ::std::os::raw::c_uint = 59;
pub const B00111011: ::std::os::raw::c_uint = 59;
pub const B111100: ::std::os::raw::c_uint = 60;
pub const B0111100: ::std::os::raw::c_uint = 60;
pub const B00111100: ::std::os::raw::c_uint = 60;
pub const B111101: ::std::os::raw::c_uint = 61;
pub const B0111101: ::std::os::raw::c_uint = 61;
pub const B00111101: ::std::os::raw::c_uint = 61;
pub const B111110: ::std::os::raw::c_uint = 62;
pub const B0111110: ::std::os::raw::c_uint = 62;
pub const B00111110: ::std::os::raw::c_uint = 62;
pub const B111111: ::std::os::raw::c_uint = 63;
pub const B0111111: ::std::os::raw::c_uint = 63;
pub const B00111111: ::std::os::raw::c_uint = 63;
pub const B1000000: ::std::os::raw::c_uint = 64;
pub const B01000000: ::std::os::raw::c_uint = 64;
pub const B1000001: ::std::os::raw::c_uint = 65;
pub const B01000001: ::std::os::raw::c_uint = 65;
pub const B1000010: ::std::os::raw::c_uint = 66;
pub const B01000010: ::std::os::raw::c_uint = 66;
pub const B1000011: ::std::os::raw::c_uint = 67;
pub const B01000011: ::std::os::raw::c_uint = 67;
pub const B1000100: ::std::os::raw::c_uint = 68;
pub const B01000100: ::std::os::raw::c_uint = 68;
pub const B1000101: ::std::os::raw::c_uint = 69;
pub const B01000101: ::std::os::raw::c_uint = 69;
pub const B1000110: ::std::os::raw::c_uint = 70;
pub const B01000110: ::std::os::raw::c_uint = 70;
pub const B1000111: ::std::os::raw::c_uint = 71;
pub const B01000111: ::std::os::raw::c_uint = 71;
pub const B1001000: ::std::os::raw::c_uint = 72;
pub const B01001000: ::std::os::raw::c_uint = 72;
pub const B1001001: ::std::os::raw::c_uint = 73;
pub const B01001001: ::std::os::raw::c_uint = 73;
pub const B1001010: ::std::os::raw::c_uint = 74;
pub const B01001010: ::std::os::raw::c_uint = 74;
pub const B1001011: ::std::os::raw::c_uint = 75;
pub const B01001011: ::std::os::raw::c_uint = 75;
pub const B1001100: ::std::os::raw::c_uint = 76;
pub const B01001100: ::std::os::raw::c_uint = 76;
pub const B1001101: ::std::os::raw::c_uint = 77;
pub const B01001101: ::std::os::raw::c_uint = 77;
pub const B1001110: ::std::os::raw::c_uint = 78;
pub const B01001110: ::std::os::raw::c_uint = 78;
pub const B1001111: ::std::os::raw::c_uint = 79;
pub const B01001111: ::std::os::raw::c_uint = 79;
pub const B1010000: ::std::os::raw::c_uint = 80;
pub const B01010000: ::std::os::raw::c_uint = 80;
pub const B1010001: ::std::os::raw::c_uint = 81;
pub const B01010001: ::std::os::raw::c_uint = 81;
pub const B1010010: ::std::os::raw::c_uint = 82;
pub const B01010010: ::std::os::raw::c_uint = 82;
pub const B1010011: ::std::os::raw::c_uint = 83;
pub const B01010011: ::std::os::raw::c_uint = 83;
pub const B1010100: ::std::os::raw::c_uint = 84;
pub const B01010100: ::std::os::raw::c_uint = 84;
pub const B1010101: ::std::os::raw::c_uint = 85;
pub const B01010101: ::std::os::raw::c_uint = 85;
pub const B1010110: ::std::os::raw::c_uint = 86;
pub const B01010110: ::std::os::raw::c_uint = 86;
pub const B1010111: ::std::os::raw::c_uint = 87;
pub const B01010111: ::std::os::raw::c_uint = 87;
pub const B1011000: ::std::os::raw::c_uint = 88;
pub const B01011000: ::std::os::raw::c_uint = 88;
pub const B1011001: ::std::os::raw::c_uint = 89;
pub const B01011001: ::std::os::raw::c_uint = 89;
pub const B1011010: ::std::os::raw::c_uint = 90;
pub const B01011010: ::std::os::raw::c_uint = 90;
pub const B1011011: ::std::os::raw::c_uint = 91;
pub const B01011011: ::std::os::raw::c_uint = 91;
pub const B1011100: ::std::os::raw::c_uint = 92;
pub const B01011100: ::std::os::raw::c_uint = 92;
pub const B1011101: ::std::os::raw::c_uint = 93;
pub const B01011101: ::std::os::raw::c_uint = 93;
pub const B1011110: ::std::os::raw::c_uint = 94;
pub const B01011110: ::std::os::raw::c_uint = 94;
pub const B1011111: ::std::os::raw::c_uint = 95;
pub const B01011111: ::std::os::raw::c_uint = 95;
pub const B1100000: ::std::os::raw::c_uint = 96;
pub const B01100000: ::std::os::raw::c_uint = 96;
pub const B1100001: ::std::os::raw::c_uint = 97;
pub const B01100001: ::std::os::raw::c_uint = 97;
pub const B1100010: ::std::os::raw::c_uint = 98;
pub const B01100010: ::std::os::raw::c_uint = 98;
pub const B1100011: ::std::os::raw::c_uint = 99;
pub const B01100011: ::std::os::raw::c_uint = 99;
pub const B1100100: ::std::os::raw::c_uint = 100;
pub const B01100100: ::std::os::raw::c_uint = 100;
pub const B1100101: ::std::os::raw::c_uint = 101;
pub const B01100101: ::std::os::raw::c_uint = 101;
pub const B1100110: ::std::os::raw::c_uint = 102;
pub const B01100110: ::std::os::raw::c_uint = 102;
pub const B1100111: ::std::os::raw::c_uint = 103;
pub const B01100111: ::std::os::raw::c_uint = 103;
pub const B1101000: ::std::os::raw::c_uint = 104;
pub const B01101000: ::std::os::raw::c_uint = 104;
pub const B1101001: ::std::os::raw::c_uint = 105;
pub const B01101001: ::std::os::raw::c_uint = 105;
pub const B1101010: ::std::os::raw::c_uint = 106;
pub const B01101010: ::std::os::raw::c_uint = 106;
pub const B1101011: ::std::os::raw::c_uint = 107;
pub const B01101011: ::std::os::raw::c_uint = 107;
pub const B1101100: ::std::os::raw::c_uint = 108;
pub const B01101100: ::std::os::raw::c_uint = 108;
pub const B1101101: ::std::os::raw::c_uint = 109;
pub const B01101101: ::std::os::raw::c_uint = 109;
pub const B1101110: ::std::os::raw::c_uint = 110;
pub const B01101110: ::std::os::raw::c_uint = 110;
pub const B1101111: ::std::os::raw::c_uint = 111;
pub const B01101111: ::std::os::raw::c_uint = 111;
pub const B1110000: ::std::os::raw::c_uint = 112;
pub const B01110000: ::std::os::raw::c_uint = 112;
pub const B1110001: ::std::os::raw::c_uint = 113;
pub const B01110001: ::std::os::raw::c_uint = 113;
pub const B1110010: ::std::os::raw::c_uint = 114;
pub const B01110010: ::std::os::raw::c_uint = 114;
pub const B1110011: ::std::os::raw::c_uint = 115;
pub const B01110011: ::std::os::raw::c_uint = 115;
pub const B1110100: ::std::os::raw::c_uint = 116;
pub const B01110100: ::std::os::raw::c_uint = 116;
pub const B1110101: ::std::os::raw::c_uint = 117;
pub const B01110101: ::std::os::raw::c_uint = 117;
pub const B1110110: ::std::os::raw::c_uint = 118;
pub const B01110110: ::std::os::raw::c_uint = 118;
pub const B1110111: ::std::os::raw::c_uint = 119;
pub const B01110111: ::std::os::raw::c_uint = 119;
pub const B1111000: ::std::os::raw::c_uint = 120;
pub const B01111000: ::std::os::raw::c_uint = 120;
pub const B1111001: ::std::os::raw::c_uint = 121;
pub const B01111001: ::std::os::raw::c_uint = 121;
pub const B1111010: ::std::os::raw::c_uint = 122;
pub const B01111010: ::std::os::raw::c_uint = 122;
pub const B1111011: ::std::os::raw::c_uint = 123;
pub const B01111011: ::std::os::raw::c_uint = 123;
pub const B1111100: ::std::os::raw::c_uint = 124;
pub const B01111100: ::std::os::raw::c_uint = 124;
pub const B1111101: ::std::os::raw::c_uint = 125;
pub const B01111101: ::std::os::raw::c_uint = 125;
pub const B1111110: ::std::os::raw::c_uint = 126;
pub const B01111110: ::std::os::raw::c_uint = 126;
pub const B1111111: ::std::os::raw::c_uint = 127;
pub const B01111111: ::std::os::raw::c_uint = 127;
pub const B10000000: ::std::os::raw::c_uint = 128;
pub const B10000001: ::std::os::raw::c_uint = 129;
pub const B10000010: ::std::os::raw::c_uint = 130;
pub const B10000011: ::std::os::raw::c_uint = 131;
pub const B10000100: ::std::os::raw::c_uint = 132;
pub const B10000101: ::std::os::raw::c_uint = 133;
pub const B10000110: ::std::os::raw::c_uint = 134;
pub const B10000111: ::std::os::raw::c_uint = 135;
pub const B10001000: ::std::os::raw::c_uint = 136;
pub const B10001001: ::std::os::raw::c_uint = 137;
pub const B10001010: ::std::os::raw::c_uint = 138;
pub const B10001011: ::std::os::raw::c_uint = 139;
pub const B10001100: ::std::os::raw::c_uint = 140;
pub const B10001101: ::std::os::raw::c_uint = 141;
pub const B10001110: ::std::os::raw::c_uint = 142;
pub const B10001111: ::std::os::raw::c_uint = 143;
pub const B10010000: ::std::os::raw::c_uint = 144;
pub const B10010001: ::std::os::raw::c_uint = 145;
pub const B10010010: ::std::os::raw::c_uint = 146;
pub const B10010011: ::std::os::raw::c_uint = 147;
pub const B10010100: ::std::os::raw::c_uint = 148;
pub const B10010101: ::std::os::raw::c_uint = 149;
pub const B10010110: ::std::os::raw::c_uint = 150;
pub const B10010111: ::std::os::raw::c_uint = 151;
pub const B10011000: ::std::os::raw::c_uint = 152;
pub const B10011001: ::std::os::raw::c_uint = 153;
pub const B10011010: ::std::os::raw::c_uint = 154;
pub const B10011011: ::std::os::raw::c_uint = 155;
pub const B10011100: ::std::os::raw::c_uint = 156;
pub const B10011101: ::std::os::raw::c_uint = 157;
pub const B10011110: ::std::os::raw::c_uint = 158;
pub const B10011111: ::std::os::raw::c_uint = 159;
pub const B10100000: ::std::os::raw::c_uint = 160;
pub const B10100001: ::std::os::raw::c_uint = 161;
pub const B10100010: ::std::os::raw::c_uint = 162;
pub const B10100011: ::std::os::raw::c_uint = 163;
pub const B10100100: ::std::os::raw::c_uint = 164;
pub const B10100101: ::std::os::raw::c_uint = 165;
pub const B10100110: ::std::os::raw::c_uint = 166;
pub const B10100111: ::std::os::raw::c_uint = 167;
pub const B10101000: ::std::os::raw::c_uint = 168;
pub const B10101001: ::std::os::raw::c_uint = 169;
pub const B10101010: ::std::os::raw::c_uint = 170;
pub const B10101011: ::std::os::raw::c_uint = 171;
pub const B10101100: ::std::os::raw::c_uint = 172;
pub const B10101101: ::std::os::raw::c_uint = 173;
pub const B10101110: ::std::os::raw::c_uint = 174;
pub const B10101111: ::std::os::raw::c_uint = 175;
pub const B10110000: ::std::os::raw::c_uint = 176;
pub const B10110001: ::std::os::raw::c_uint = 177;
pub const B10110010: ::std::os::raw::c_uint = 178;
pub const B10110011: ::std::os::raw::c_uint = 179;
pub const B10110100: ::std::os::raw::c_uint = 180;
pub const B10110101: ::std::os::raw::c_uint = 181;
pub const B10110110: ::std::os::raw::c_uint = 182;
pub const B10110111: ::std::os::raw::c_uint = 183;
pub const B10111000: ::std::os::raw::c_uint = 184;
pub const B10111001: ::std::os::raw::c_uint = 185;
pub const B10111010: ::std::os::raw::c_uint = 186;
pub const B10111011: ::std::os::raw::c_uint = 187;
pub const B10111100: ::std::os::raw::c_uint = 188;
pub const B10111101: ::std::os::raw::c_uint = 189;
pub const B10111110: ::std::os::raw::c_uint = 190;
pub const B10111111: ::std::os::raw::c_uint = 191;
pub const B11000000: ::std::os::raw::c_uint = 192;
pub const B11000001: ::std::os::raw::c_uint = 193;
pub const B11000010: ::std::os::raw::c_uint = 194;
pub const B11000011: ::std::os::raw::c_uint = 195;
pub const B11000100: ::std::os::raw::c_uint = 196;
pub const B11000101: ::std::os::raw::c_uint = 197;
pub const B11000110: ::std::os::raw::c_uint = 198;
pub const B11000111: ::std::os::raw::c_uint = 199;
pub const B11001000: ::std::os::raw::c_uint = 200;
pub const B11001001: ::std::os::raw::c_uint = 201;
pub const B11001010: ::std::os::raw::c_uint = 202;
pub const B11001011: ::std::os::raw::c_uint = 203;
pub const B11001100: ::std::os::raw::c_uint = 204;
pub const B11001101: ::std::os::raw::c_uint = 205;
pub const B11001110: ::std::os::raw::c_uint = 206;
pub const B11001111: ::std::os::raw::c_uint = 207;
pub const B11010000: ::std::os::raw::c_uint = 208;
pub const B11010001: ::std::os::raw::c_uint = 209;
pub const B11010010: ::std::os::raw::c_uint = 210;
pub const B11010011: ::std::os::raw::c_uint = 211;
pub const B11010100: ::std::os::raw::c_uint = 212;
pub const B11010101: ::std::os::raw::c_uint = 213;
pub const B11010110: ::std::os::raw::c_uint = 214;
pub const B11010111: ::std::os::raw::c_uint = 215;
pub const B11011000: ::std::os::raw::c_uint = 216;
pub const B11011001: ::std::os::raw::c_uint = 217;
pub const B11011010: ::std::os::raw::c_uint = 218;
pub const B11011011: ::std::os::raw::c_uint = 219;
pub const B11011100: ::std::os::raw::c_uint = 220;
pub const B11011101: ::std::os::raw::c_uint = 221;
pub const B11011110: ::std::os::raw::c_uint = 222;
pub const B11011111: ::std::os::raw::c_uint = 223;
pub const B11100000: ::std::os::raw::c_uint = 224;
pub const B11100001: ::std::os::raw::c_uint = 225;
pub const B11100010: ::std::os::raw::c_uint = 226;
pub const B11100011: ::std::os::raw::c_uint = 227;
pub const B11100100: ::std::os::raw::c_uint = 228;
pub const B11100101: ::std::os::raw::c_uint = 229;
pub const B11100110: ::std::os::raw::c_uint = 230;
pub const B11100111: ::std::os::raw::c_uint = 231;
pub const B11101000: ::std::os::raw::c_uint = 232;
pub const B11101001: ::std::os::raw::c_uint = 233;
pub const B11101010: ::std::os::raw::c_uint = 234;
pub const B11101011: ::std::os::raw::c_uint = 235;
pub const B11101100: ::std::os::raw::c_uint = 236;
pub const B11101101: ::std::os::raw::c_uint = 237;
pub const B11101110: ::std::os::raw::c_uint = 238;
pub const B11101111: ::std::os::raw::c_uint = 239;
pub const B11110000: ::std::os::raw::c_uint = 240;
pub const B11110001: ::std::os::raw::c_uint = 241;
pub const B11110010: ::std::os::raw::c_uint = 242;
pub const B11110011: ::std::os::raw::c_uint = 243;
pub const B11110100: ::std::os::raw::c_uint = 244;
pub const B11110101: ::std::os::raw::c_uint = 245;
pub const B11110110: ::std::os::raw::c_uint = 246;
pub const B11110111: ::std::os::raw::c_uint = 247;
pub const B11111000: ::std::os::raw::c_uint = 248;
pub const B11111001: ::std::os::raw::c_uint = 249;
pub const B11111010: ::std::os::raw::c_uint = 250;
pub const B11111011: ::std::os::raw::c_uint = 251;
pub const B11111100: ::std::os::raw::c_uint = 252;
pub const B11111101: ::std::os::raw::c_uint = 253;
pub const B11111110: ::std::os::raw::c_uint = 254;
pub const B11111111: ::std::os::raw::c_uint = 255;
pub const NVIC_NUM_INTERRUPTS: ::std::os::raw::c_uint = 95;
pub const DMA_NUM_CHANNELS: ::std::os::raw::c_uint = 16;
pub const DMAMUX_SOURCE_UART0_RX: ::std::os::raw::c_uint = 2;
pub const DMAMUX_SOURCE_UART0_TX: ::std::os::raw::c_uint = 3;
pub const DMAMUX_SOURCE_UART1_RX: ::std::os::raw::c_uint = 4;
pub const DMAMUX_SOURCE_UART1_TX: ::std::os::raw::c_uint = 5;
pub const DMAMUX_SOURCE_UART2_RX: ::std::os::raw::c_uint = 6;
pub const DMAMUX_SOURCE_UART2_TX: ::std::os::raw::c_uint = 7;
pub const DMAMUX_SOURCE_I2S0_RX: ::std::os::raw::c_uint = 14;
pub const DMAMUX_SOURCE_I2S0_TX: ::std::os::raw::c_uint = 15;
pub const DMAMUX_SOURCE_SPI0_RX: ::std::os::raw::c_uint = 16;
pub const DMAMUX_SOURCE_SPI0_TX: ::std::os::raw::c_uint = 17;
pub const DMAMUX_SOURCE_SPI1_RX: ::std::os::raw::c_uint = 18;
pub const DMAMUX_SOURCE_SPI1_TX: ::std::os::raw::c_uint = 19;
pub const DMAMUX_SOURCE_I2C0: ::std::os::raw::c_uint = 22;
pub const DMAMUX_SOURCE_I2C1: ::std::os::raw::c_uint = 23;
pub const DMAMUX_SOURCE_FTM0_CH0: ::std::os::raw::c_uint = 24;
pub const DMAMUX_SOURCE_FTM0_CH1: ::std::os::raw::c_uint = 25;
pub const DMAMUX_SOURCE_FTM0_CH2: ::std::os::raw::c_uint = 26;
pub const DMAMUX_SOURCE_FTM0_CH3: ::std::os::raw::c_uint = 27;
pub const DMAMUX_SOURCE_FTM0_CH4: ::std::os::raw::c_uint = 28;
pub const DMAMUX_SOURCE_FTM0_CH5: ::std::os::raw::c_uint = 29;
pub const DMAMUX_SOURCE_FTM0_CH6: ::std::os::raw::c_uint = 30;
pub const DMAMUX_SOURCE_FTM0_CH7: ::std::os::raw::c_uint = 31;
pub const DMAMUX_SOURCE_FTM1_CH0: ::std::os::raw::c_uint = 32;
pub const DMAMUX_SOURCE_FTM1_CH1: ::std::os::raw::c_uint = 33;
pub const DMAMUX_SOURCE_FTM2_CH0: ::std::os::raw::c_uint = 34;
pub const DMAMUX_SOURCE_FTM2_CH1: ::std::os::raw::c_uint = 35;
pub const DMAMUX_SOURCE_ADC0: ::std::os::raw::c_uint = 40;
pub const DMAMUX_SOURCE_ADC1: ::std::os::raw::c_uint = 41;
pub const DMAMUX_SOURCE_CMP0: ::std::os::raw::c_uint = 42;
pub const DMAMUX_SOURCE_CMP1: ::std::os::raw::c_uint = 43;
pub const DMAMUX_SOURCE_CMP2: ::std::os::raw::c_uint = 44;
pub const DMAMUX_SOURCE_DAC0: ::std::os::raw::c_uint = 45;
pub const DMAMUX_SOURCE_CMT: ::std::os::raw::c_uint = 47;
pub const DMAMUX_SOURCE_PDB: ::std::os::raw::c_uint = 48;
pub const DMAMUX_SOURCE_PORTA: ::std::os::raw::c_uint = 49;
pub const DMAMUX_SOURCE_PORTB: ::std::os::raw::c_uint = 50;
pub const DMAMUX_SOURCE_PORTC: ::std::os::raw::c_uint = 51;
pub const DMAMUX_SOURCE_PORTD: ::std::os::raw::c_uint = 52;
pub const DMAMUX_SOURCE_PORTE: ::std::os::raw::c_uint = 53;
pub const DMAMUX_SOURCE_ALWAYS0: ::std::os::raw::c_uint = 54;
pub const DMAMUX_SOURCE_ALWAYS1: ::std::os::raw::c_uint = 55;
pub const DMAMUX_SOURCE_ALWAYS2: ::std::os::raw::c_uint = 56;
pub const DMAMUX_SOURCE_ALWAYS3: ::std::os::raw::c_uint = 57;
pub const DMAMUX_SOURCE_ALWAYS4: ::std::os::raw::c_uint = 58;
pub const DMAMUX_SOURCE_ALWAYS5: ::std::os::raw::c_uint = 59;
pub const DMAMUX_SOURCE_ALWAYS6: ::std::os::raw::c_uint = 60;
pub const DMAMUX_SOURCE_ALWAYS7: ::std::os::raw::c_uint = 61;
pub const DMAMUX_SOURCE_ALWAYS8: ::std::os::raw::c_uint = 62;
pub const DMAMUX_SOURCE_ALWAYS9: ::std::os::raw::c_uint = 63;
pub const DMAMUX_NUM_SOURCE_ALWAYS: ::std::os::raw::c_uint = 10;
pub const F_PLL: ::std::os::raw::c_uint = 96000000;
pub const F_BUS: ::std::os::raw::c_uint = 48000000;
pub const F_MEM: ::std::os::raw::c_uint = 24000000;
pub const DMAMUX_DISABLE: ::std::os::raw::c_uint = 0;
pub const DMAMUX_TRIG: ::std::os::raw::c_uint = 64;
pub const DMAMUX_ENABLE: ::std::os::raw::c_uint = 128;
pub const DMA_TCD_ATTR_SIZE_8BIT: ::std::os::raw::c_uint = 0;
pub const DMA_TCD_ATTR_SIZE_16BIT: ::std::os::raw::c_uint = 1;
pub const DMA_TCD_ATTR_SIZE_32BIT: ::std::os::raw::c_uint = 2;
pub const DMA_TCD_ATTR_SIZE_16BYTE: ::std::os::raw::c_uint = 4;
pub const DMA_TCD_ATTR_SIZE_32BYTE: ::std::os::raw::c_uint = 5;
pub const DMA_TCD_CSR_BWC_MASK: ::std::os::raw::c_uint = 49152;
pub const DMA_TCD_CSR_MAJORLINKCH_MASK: ::std::os::raw::c_uint = 3840;
pub const DMA_TCD_CSR_DONE: ::std::os::raw::c_uint = 128;
pub const DMA_TCD_CSR_ACTIVE: ::std::os::raw::c_uint = 64;
pub const DMA_TCD_CSR_MAJORELINK: ::std::os::raw::c_uint = 32;
pub const DMA_TCD_CSR_ESG: ::std::os::raw::c_uint = 16;
pub const DMA_TCD_CSR_DREQ: ::std::os::raw::c_uint = 8;
pub const DMA_TCD_CSR_INTHALF: ::std::os::raw::c_uint = 4;
pub const DMA_TCD_CSR_INTMAJOR: ::std::os::raw::c_uint = 2;
pub const DMA_TCD_CSR_START: ::std::os::raw::c_uint = 1;
pub const DMA_TCD_BITER_ELINKYES_ELINK: ::std::os::raw::c_uint = 32768;
pub const DMA_TCD_BITER_ELINKYES_LINKCH_MASK: ::std::os::raw::c_uint = 7680;
pub const DMA_TCD_BITER_ELINKYES_BITER_MASK: ::std::os::raw::c_uint = 511;
pub const DMA_TCD_CITER_ELINKYES_ELINK: ::std::os::raw::c_uint = 32768;
pub const DMA_TCD_CITER_ELINKYES_LINKCH_MASK: ::std::os::raw::c_uint = 7680;
pub const DMA_TCD_CITER_ELINKYES_CITER_MASK: ::std::os::raw::c_uint = 511;
pub const DAC_C0_DACEN: ::std::os::raw::c_uint = 128;
pub const DAC_C0_DACRFS: ::std::os::raw::c_uint = 64;
pub const DAC_C0_DACTRGSEL: ::std::os::raw::c_uint = 32;
pub const DAC_C0_DACSWTRG: ::std::os::raw::c_uint = 16;
pub const DAC_C0_LPEN: ::std::os::raw::c_uint = 8;
pub const DAC_C0_DACBWIEN: ::std::os::raw::c_uint = 4;
pub const DAC_C0_DACBTIEN: ::std::os::raw::c_uint = 2;
pub const DAC_C0_DACBBIEN: ::std::os::raw::c_uint = 1;
pub const DAC_C1_DMAEN: ::std::os::raw::c_uint = 128;
pub const DAC_C1_DACBFEN: ::std::os::raw::c_uint = 1;
pub const PDB_SC_PDBEIE: ::std::os::raw::c_uint = 131072;
pub const PDB_SC_SWTRIG: ::std::os::raw::c_uint = 65536;
pub const PDB_SC_DMAEN: ::std::os::raw::c_uint = 32768;
pub const PDB_SC_PDBEN: ::std::os::raw::c_uint = 128;
pub const PDB_SC_PDBIF: ::std::os::raw::c_uint = 64;
pub const PDB_SC_PDBIE: ::std::os::raw::c_uint = 32;
pub const PDB_SC_CONT: ::std::os::raw::c_uint = 2;
pub const PDB_SC_LDOK: ::std::os::raw::c_uint = 1;
pub const FTM_SC_TOF: ::std::os::raw::c_uint = 128;
pub const FTM_SC_TOIE: ::std::os::raw::c_uint = 64;
pub const FTM_SC_CPWMS: ::std::os::raw::c_uint = 32;
pub const FTM_SC_CLKS_MASK: ::std::os::raw::c_uint = 24;
pub const FTM_SC_PS_MASK: ::std::os::raw::c_uint = 7;
pub const FTM_CSC_CHF: ::std::os::raw::c_uint = 128;
pub const FTM_CSC_CHIE: ::std::os::raw::c_uint = 64;
pub const FTM_CSC_MSB: ::std::os::raw::c_uint = 32;
pub const FTM_CSC_MSA: ::std::os::raw::c_uint = 16;
pub const FTM_CSC_ELSB: ::std::os::raw::c_uint = 8;
pub const FTM_CSC_ELSA: ::std::os::raw::c_uint = 4;
pub const FTM_CSC_DMA: ::std::os::raw::c_uint = 1;
pub const FTM_STATUS_CH7F: ::std::os::raw::c_uint = 128;
pub const FTM_STATUS_CH6F: ::std::os::raw::c_uint = 64;
pub const FTM_STATUS_CH5F: ::std::os::raw::c_uint = 32;
pub const FTM_STATUS_CH4F: ::std::os::raw::c_uint = 16;
pub const FTM_STATUS_CH3F: ::std::os::raw::c_uint = 8;
pub const FTM_STATUS_CH2F: ::std::os::raw::c_uint = 4;
pub const FTM_STATUS_CH1F: ::std::os::raw::c_uint = 2;
pub const FTM_STATUS_CH0F: ::std::os::raw::c_uint = 1;
pub const FTM_MODE_FAULTIE: ::std::os::raw::c_uint = 128;
pub const FTM_MODE_FAULTM_MASK: ::std::os::raw::c_uint = 96;
pub const FTM_MODE_CAPTEST: ::std::os::raw::c_uint = 16;
pub const FTM_MODE_PWMSYNC: ::std::os::raw::c_uint = 8;
pub const FTM_MODE_WPDIS: ::std::os::raw::c_uint = 4;
pub const FTM_MODE_INIT: ::std::os::raw::c_uint = 2;
pub const FTM_MODE_FTMEN: ::std::os::raw::c_uint = 1;
pub const FTM_SYNC_SWSYNC: ::std::os::raw::c_uint = 128;
pub const FTM_SYNC_TRIG2: ::std::os::raw::c_uint = 64;
pub const FTM_SYNC_TRIG1: ::std::os::raw::c_uint = 32;
pub const FTM_SYNC_TRIG0: ::std::os::raw::c_uint = 16;
pub const FTM_SYNC_SYNCHOM: ::std::os::raw::c_uint = 8;
pub const FTM_SYNC_REINIT: ::std::os::raw::c_uint = 4;
pub const FTM_SYNC_CNTMAX: ::std::os::raw::c_uint = 2;
pub const FTM_SYNC_CNTMIN: ::std::os::raw::c_uint = 1;
pub const FTM_OUTINIT_CH7OI: ::std::os::raw::c_uint = 128;
pub const FTM_OUTINIT_CH6OI: ::std::os::raw::c_uint = 64;
pub const FTM_OUTINIT_CH5OI: ::std::os::raw::c_uint = 32;
pub const FTM_OUTINIT_CH4OI: ::std::os::raw::c_uint = 16;
pub const FTM_OUTINIT_CH3OI: ::std::os::raw::c_uint = 8;
pub const FTM_OUTINIT_CH2OI: ::std::os::raw::c_uint = 4;
pub const FTM_OUTINIT_CH1OI: ::std::os::raw::c_uint = 2;
pub const FTM_OUTINIT_CH0OI: ::std::os::raw::c_uint = 1;
pub const FTM_OUTMASK_CH7OM: ::std::os::raw::c_uint = 128;
pub const FTM_OUTMASK_CH6OM: ::std::os::raw::c_uint = 64;
pub const FTM_OUTMASK_CH5OM: ::std::os::raw::c_uint = 32;
pub const FTM_OUTMASK_CH4OM: ::std::os::raw::c_uint = 16;
pub const FTM_OUTMASK_CH3OM: ::std::os::raw::c_uint = 8;
pub const FTM_OUTMASK_CH2OM: ::std::os::raw::c_uint = 4;
pub const FTM_OUTMASK_CH1OM: ::std::os::raw::c_uint = 2;
pub const FTM_OUTMASK_CH0OM: ::std::os::raw::c_uint = 1;
pub const FTM_COMBINE_FAULTEN3: ::std::os::raw::c_uint = 1073741824;
pub const FTM_COMBINE_SYNCEN3: ::std::os::raw::c_uint = 536870912;
pub const FTM_COMBINE_DTEN3: ::std::os::raw::c_uint = 268435456;
pub const FTM_COMBINE_DECAP3: ::std::os::raw::c_uint = 134217728;
pub const FTM_COMBINE_DECAPEN3: ::std::os::raw::c_uint = 67108864;
pub const FTM_COMBINE_COMP3: ::std::os::raw::c_uint = 33554432;
pub const FTM_COMBINE_COMBINE3: ::std::os::raw::c_uint = 16777216;
pub const FTM_COMBINE_FAULTEN2: ::std::os::raw::c_uint = 4194304;
pub const FTM_COMBINE_SYNCEN2: ::std::os::raw::c_uint = 2097152;
pub const FTM_COMBINE_DTEN2: ::std::os::raw::c_uint = 1048576;
pub const FTM_COMBINE_DECAP2: ::std::os::raw::c_uint = 524288;
pub const FTM_COMBINE_DECAPEN2: ::std::os::raw::c_uint = 262144;
pub const FTM_COMBINE_COMP2: ::std::os::raw::c_uint = 131072;
pub const FTM_COMBINE_COMBINE2: ::std::os::raw::c_uint = 65536;
pub const FTM_COMBINE_FAULTEN1: ::std::os::raw::c_uint = 16384;
pub const FTM_COMBINE_SYNCEN1: ::std::os::raw::c_uint = 8192;
pub const FTM_COMBINE_DTEN1: ::std::os::raw::c_uint = 4096;
pub const FTM_COMBINE_DECAP1: ::std::os::raw::c_uint = 2048;
pub const FTM_COMBINE_DECAPEN1: ::std::os::raw::c_uint = 1024;
pub const FTM_COMBINE_COMP1: ::std::os::raw::c_uint = 512;
pub const FTM_COMBINE_COMBINE1: ::std::os::raw::c_uint = 256;
pub const FTM_COMBINE_FAULTEN0: ::std::os::raw::c_uint = 64;
pub const FTM_COMBINE_SYNCEN0: ::std::os::raw::c_uint = 32;
pub const FTM_COMBINE_DTEN0: ::std::os::raw::c_uint = 16;
pub const FTM_COMBINE_DECAP0: ::std::os::raw::c_uint = 8;
pub const FTM_COMBINE_DECAPEN0: ::std::os::raw::c_uint = 4;
pub const FTM_COMBINE_COMP0: ::std::os::raw::c_uint = 2;
pub const FTM_COMBINE_COMBINE0: ::std::os::raw::c_uint = 1;
pub const FTM_DEADTIME_DTPS_MASK: ::std::os::raw::c_uint = 192;
pub const FTM_DEADTIME_DTVAL_MASK: ::std::os::raw::c_uint = 63;
pub const FTM_EXTTRIG_TRIGF: ::std::os::raw::c_uint = 128;
pub const FTM_EXTTRIG_INITTRIGEN: ::std::os::raw::c_uint = 64;
pub const FTM_EXTTRIG_CH1TRIG: ::std::os::raw::c_uint = 32;
pub const FTM_EXTTRIG_CH0TRIG: ::std::os::raw::c_uint = 16;
pub const FTM_EXTTRIG_CH5TRIG: ::std::os::raw::c_uint = 8;
pub const FTM_EXTTRIG_CH4TRIG: ::std::os::raw::c_uint = 4;
pub const FTM_EXTTRIG_CH3TRIG: ::std::os::raw::c_uint = 2;
pub const FTM_EXTTRIG_CH2TRIG: ::std::os::raw::c_uint = 1;
pub const FTM_POL_POL7: ::std::os::raw::c_uint = 128;
pub const FTM_POL_POL6: ::std::os::raw::c_uint = 64;
pub const FTM_POL_POL5: ::std::os::raw::c_uint = 32;
pub const FTM_POL_POL4: ::std::os::raw::c_uint = 16;
pub const FTM_POL_POL3: ::std::os::raw::c_uint = 8;
pub const FTM_POL_POL2: ::std::os::raw::c_uint = 4;
pub const FTM_POL_POL1: ::std::os::raw::c_uint = 2;
pub const FTM_POL_POL0: ::std::os::raw::c_uint = 1;
pub const FTM_FMS_FAULTF: ::std::os::raw::c_uint = 128;
pub const FTM_FMS_WPEN: ::std::os::raw::c_uint = 64;
pub const FTM_FMS_FAULTIN: ::std::os::raw::c_uint = 32;
pub const FTM_FMS_FAULTF3: ::std::os::raw::c_uint = 8;
pub const FTM_FMS_FAULTF2: ::std::os::raw::c_uint = 4;
pub const FTM_FMS_FAULTF1: ::std::os::raw::c_uint = 2;
pub const FTM_FMS_FAULTF0: ::std::os::raw::c_uint = 1;
pub const FTM_FILTER_CH3FVAL_MASK: ::std::os::raw::c_uint = 61440;
pub const FTM_FILTER_CH2FVAL_MASK: ::std::os::raw::c_uint = 3840;
pub const FTM_FILTER_CH1FVAL_MASK: ::std::os::raw::c_uint = 240;
pub const FTM_FILTER_CH0FVAL_MASK: ::std::os::raw::c_uint = 15;
pub const FTM_FLTCTRL_FFVAL_MASK: ::std::os::raw::c_uint = 3840;
pub const FTM_FLTCTRL_FFLTR3EN: ::std::os::raw::c_uint = 128;
pub const FTM_FLTCTRL_FFLTR2EN: ::std::os::raw::c_uint = 64;
pub const FTM_FLTCTRL_FFLTR1EN: ::std::os::raw::c_uint = 32;
pub const FTM_FLTCTRL_FFLTR0EN: ::std::os::raw::c_uint = 16;
pub const FTM_FLTCTRL_FAULT3EN: ::std::os::raw::c_uint = 8;
pub const FTM_FLTCTRL_FAULT2EN: ::std::os::raw::c_uint = 4;
pub const FTM_FLTCTRL_FAULT1EN: ::std::os::raw::c_uint = 2;
pub const FTM_FLTCTRL_FAULT0EN: ::std::os::raw::c_uint = 1;
pub const FTM_QDCTRL_PHAFLTREN: ::std::os::raw::c_uint = 128;
pub const FTM_QDCTRL_PHBFLTREN: ::std::os::raw::c_uint = 64;
pub const FTM_QDCTRL_PHAPOL: ::std::os::raw::c_uint = 32;
pub const FTM_QDCTRL_PHBPOL: ::std::os::raw::c_uint = 16;
pub const FTM_QDCTRL_QUADMODE: ::std::os::raw::c_uint = 8;
pub const FTM_QDCTRL_QUADIR: ::std::os::raw::c_uint = 4;
pub const FTM_QDCTRL_TOFDIR: ::std::os::raw::c_uint = 2;
pub const FTM_QDCTRL_QUADEN: ::std::os::raw::c_uint = 1;
pub const FTM_CONF_GTBEOUT: ::std::os::raw::c_uint = 1024;
pub const FTM_CONF_GTBEEN: ::std::os::raw::c_uint = 512;
pub const FTM_FLTPOL_FLT3POL: ::std::os::raw::c_uint = 8;
pub const FTM_FLTPOL_FLT2POL: ::std::os::raw::c_uint = 4;
pub const FTM_FLTPOL_FLT1POL: ::std::os::raw::c_uint = 2;
pub const FTM_FLTPOL_FLT0POL: ::std::os::raw::c_uint = 1;
pub const FTM_SYNCONF_HWSOC: ::std::os::raw::c_uint = 1048576;
pub const FTM_SYNCONF_HWINVC: ::std::os::raw::c_uint = 524288;
pub const FTM_SYNCONF_HWOM: ::std::os::raw::c_uint = 262144;
pub const FTM_SYNCONF_HWWRBUF: ::std::os::raw::c_uint = 131072;
pub const FTM_SYNCONF_HWRSTCNT: ::std::os::raw::c_uint = 65536;
pub const FTM_SYNCONF_SWSOC: ::std::os::raw::c_uint = 4096;
pub const FTM_SYNCONF_SWINVC: ::std::os::raw::c_uint = 2048;
pub const FTM_SYNCONF_SWOM: ::std::os::raw::c_uint = 1024;
pub const FTM_SYNCONF_SWWRBUF: ::std::os::raw::c_uint = 512;
pub const FTM_SYNCONF_SWRSTCNT: ::std::os::raw::c_uint = 256;
pub const FTM_SYNCONF_SYNCMODE: ::std::os::raw::c_uint = 128;
pub const FTM_SYNCONF_SWOC: ::std::os::raw::c_uint = 32;
pub const FTM_SYNCONF_INVC: ::std::os::raw::c_uint = 16;
pub const FTM_SYNCONF_CNTINC: ::std::os::raw::c_uint = 4;
pub const FTM_SYNCONF_HWTRIGMODE: ::std::os::raw::c_uint = 1;
pub const FTM_INVCTRL_INV3EN: ::std::os::raw::c_uint = 8;
pub const FTM_INVCTRL_INV2EN: ::std::os::raw::c_uint = 4;
pub const FTM_INVCTRL_INV1EN: ::std::os::raw::c_uint = 2;
pub const FTM_INVCTRL_INV0EN: ::std::os::raw::c_uint = 1;
pub const FTM_SWOCTRL_CH7OCV: ::std::os::raw::c_uint = 32768;
pub const FTM_SWOCTRL_CH6OCV: ::std::os::raw::c_uint = 16384;
pub const FTM_SWOCTRL_CH5OCV: ::std::os::raw::c_uint = 8192;
pub const FTM_SWOCTRL_CH4OCV: ::std::os::raw::c_uint = 4096;
pub const FTM_SWOCTRL_CH3OCV: ::std::os::raw::c_uint = 2048;
pub const FTM_SWOCTRL_CH2OCV: ::std::os::raw::c_uint = 1024;
pub const FTM_SWOCTRL_CH1OCV: ::std::os::raw::c_uint = 512;
pub const FTM_SWOCTRL_CH0OCV: ::std::os::raw::c_uint = 256;
pub const FTM_SWOCTRL_CH7OC: ::std::os::raw::c_uint = 128;
pub const FTM_SWOCTRL_CH6OC: ::std::os::raw::c_uint = 64;
pub const FTM_SWOCTRL_CH5OC: ::std::os::raw::c_uint = 32;
pub const FTM_SWOCTRL_CH4OC: ::std::os::raw::c_uint = 16;
pub const FTM_SWOCTRL_CH3OC: ::std::os::raw::c_uint = 8;
pub const FTM_SWOCTRL_CH2OC: ::std::os::raw::c_uint = 4;
pub const FTM_SWOCTRL_CH1OC: ::std::os::raw::c_uint = 2;
pub const FTM_SWOCTRL_CH0OC: ::std::os::raw::c_uint = 1;
pub const FTM_PWMLOAD_LDOK: ::std::os::raw::c_uint = 512;
pub const FTM_PWMLOAD_CH7SEL: ::std::os::raw::c_uint = 128;
pub const FTM_PWMLOAD_CH6SEL: ::std::os::raw::c_uint = 64;
pub const FTM_PWMLOAD_CH5SEL: ::std::os::raw::c_uint = 32;
pub const FTM_PWMLOAD_CH4SEL: ::std::os::raw::c_uint = 16;
pub const FTM_PWMLOAD_CH3SEL: ::std::os::raw::c_uint = 8;
pub const FTM_PWMLOAD_CH2SEL: ::std::os::raw::c_uint = 4;
pub const FTM_PWMLOAD_CH1SEL: ::std::os::raw::c_uint = 2;
pub const FTM_PWMLOAD_CH0SEL: ::std::os::raw::c_uint = 1;
pub const LPTMR_CSR_TCF: ::std::os::raw::c_uint = 128;
pub const LPTMR_CSR_TIE: ::std::os::raw::c_uint = 64;
pub const LPTMR_CSR_TPP: ::std::os::raw::c_uint = 8;
pub const LPTMR_CSR_TFC: ::std::os::raw::c_uint = 4;
pub const LPTMR_CSR_TMS: ::std::os::raw::c_uint = 2;
pub const LPTMR_CSR_TEN: ::std::os::raw::c_uint = 1;
pub const LPTMR_PSR_PBYP: ::std::os::raw::c_uint = 4;
pub const UART_BDH_SBNS: ::std::os::raw::c_uint = 32;
pub const UART_C1_LOOPS: ::std::os::raw::c_uint = 128;
pub const UART_C1_UARTSWAI: ::std::os::raw::c_uint = 64;
pub const UART_C1_RSRC: ::std::os::raw::c_uint = 32;
pub const UART_C1_M: ::std::os::raw::c_uint = 16;
pub const UART_C1_WAKE: ::std::os::raw::c_uint = 8;
pub const UART_C1_ILT: ::std::os::raw::c_uint = 4;
pub const UART_C1_PE: ::std::os::raw::c_uint = 2;
pub const UART_C1_PT: ::std::os::raw::c_uint = 1;
pub const UART_C2_TIE: ::std::os::raw::c_uint = 128;
pub const UART_C2_TCIE: ::std::os::raw::c_uint = 64;
pub const UART_C2_RIE: ::std::os::raw::c_uint = 32;
pub const UART_C2_ILIE: ::std::os::raw::c_uint = 16;
pub const UART_C2_TE: ::std::os::raw::c_uint = 8;
pub const UART_C2_RE: ::std::os::raw::c_uint = 4;
pub const UART_C2_RWU: ::std::os::raw::c_uint = 2;
pub const UART_C2_SBK: ::std::os::raw::c_uint = 1;
pub const UART_S1_TDRE: ::std::os::raw::c_uint = 128;
pub const UART_S1_TC: ::std::os::raw::c_uint = 64;
pub const UART_S1_RDRF: ::std::os::raw::c_uint = 32;
pub const UART_S1_IDLE: ::std::os::raw::c_uint = 16;
pub const UART_S1_OR: ::std::os::raw::c_uint = 8;
pub const UART_S1_NF: ::std::os::raw::c_uint = 4;
pub const UART_S1_FE: ::std::os::raw::c_uint = 2;
pub const UART_S1_PF: ::std::os::raw::c_uint = 1;
pub const UART_S2_LBKDIF: ::std::os::raw::c_uint = 128;
pub const UART_S2_RXEDGIF: ::std::os::raw::c_uint = 64;
pub const UART_S2_MSBF: ::std::os::raw::c_uint = 32;
pub const UART_S2_RXINV: ::std::os::raw::c_uint = 16;
pub const UART_S2_RWUID: ::std::os::raw::c_uint = 8;
pub const UART_S2_BRK13: ::std::os::raw::c_uint = 4;
pub const UART_S2_LBKDE: ::std::os::raw::c_uint = 2;
pub const UART_S2_RAF: ::std::os::raw::c_uint = 1;
pub const UART_C3_R8: ::std::os::raw::c_uint = 128;
pub const UART_C3_T8: ::std::os::raw::c_uint = 64;
pub const UART_C3_TXDIR: ::std::os::raw::c_uint = 32;
pub const UART_C3_TXINV: ::std::os::raw::c_uint = 16;
pub const UART_C3_ORIE: ::std::os::raw::c_uint = 8;
pub const UART_C3_NEIE: ::std::os::raw::c_uint = 4;
pub const UART_C3_FEIE: ::std::os::raw::c_uint = 2;
pub const UART_C3_PEIE: ::std::os::raw::c_uint = 1;
pub const UART_C4_MAEN1: ::std::os::raw::c_uint = 128;
pub const UART_C4_MAEN2: ::std::os::raw::c_uint = 64;
pub const UART_C4_M10: ::std::os::raw::c_uint = 32;
pub const UART_C5_TDMAS: ::std::os::raw::c_uint = 128;
pub const UART_C5_RDMAS: ::std::os::raw::c_uint = 32;
pub const UART_ED_NOISY: ::std::os::raw::c_uint = 128;
pub const UART_ED_PARITYE: ::std::os::raw::c_uint = 64;
pub const UART_MODEM_RXRTSE: ::std::os::raw::c_uint = 8;
pub const UART_MODEM_TXRTSPOL: ::std::os::raw::c_uint = 4;
pub const UART_MODEM_TXRTSE: ::std::os::raw::c_uint = 2;
pub const UART_MODEM_TXCTSE: ::std::os::raw::c_uint = 1;
pub const UART_IR_IREN: ::std::os::raw::c_uint = 4;
pub const UART_PFIFO_TXFE: ::std::os::raw::c_uint = 128;
pub const UART_PFIFO_RXFE: ::std::os::raw::c_uint = 8;
pub const UART_CFIFO_TXFLUSH: ::std::os::raw::c_uint = 128;
pub const UART_CFIFO_RXFLUSH: ::std::os::raw::c_uint = 64;
pub const UART_CFIFO_RXOFE: ::std::os::raw::c_uint = 4;
pub const UART_CFIFO_TXOFE: ::std::os::raw::c_uint = 2;
pub const UART_CFIFO_RXUFE: ::std::os::raw::c_uint = 1;
pub const UART_SFIFO_TXEMPT: ::std::os::raw::c_uint = 128;
pub const UART_SFIFO_RXEMPT: ::std::os::raw::c_uint = 64;
pub const UART_SFIFO_RXOF: ::std::os::raw::c_uint = 4;
pub const UART_SFIFO_TXOF: ::std::os::raw::c_uint = 2;
pub const UART_SFIFO_RXUF: ::std::os::raw::c_uint = 1;
pub const UART_C7816_ONACK: ::std::os::raw::c_uint = 16;
pub const UART_C7816_ANACK: ::std::os::raw::c_uint = 8;
pub const UART_C7816_INIT: ::std::os::raw::c_uint = 4;
pub const UART_C7816_TTYPE: ::std::os::raw::c_uint = 2;
pub const UART_C7816_ISO_7816E: ::std::os::raw::c_uint = 1;
pub const UART_IE7816_WTE: ::std::os::raw::c_uint = 128;
pub const UART_IE7816_CWTE: ::std::os::raw::c_uint = 64;
pub const UART_IE7816_BWTE: ::std::os::raw::c_uint = 32;
pub const UART_IE7816_INITDE: ::std::os::raw::c_uint = 16;
pub const UART_IE7816_GTVE: ::std::os::raw::c_uint = 4;
pub const UART_IE7816_TXTE: ::std::os::raw::c_uint = 2;
pub const UART_IE7816_RXTE: ::std::os::raw::c_uint = 1;
pub const UART_IS7816_WT: ::std::os::raw::c_uint = 128;
pub const UART_IS7816_CWT: ::std::os::raw::c_uint = 64;
pub const UART_IS7816_BWT: ::std::os::raw::c_uint = 32;
pub const UART_IS7816_INITD: ::std::os::raw::c_uint = 16;
pub const UART_IS7816_GTV: ::std::os::raw::c_uint = 4;
pub const UART_IS7816_TXT: ::std::os::raw::c_uint = 2;
pub const UART_IS7816_RXT: ::std::os::raw::c_uint = 1;
pub const UART_C6_EN709: ::std::os::raw::c_uint = 128;
pub const UART_C6_TX709: ::std::os::raw::c_uint = 64;
pub const UART_C6_CE: ::std::os::raw::c_uint = 32;
pub const UART_C6_CP: ::std::os::raw::c_uint = 16;
pub const UART_IE_WBEIE: ::std::os::raw::c_uint = 64;
pub const UART_IE_ISDIE: ::std::os::raw::c_uint = 32;
pub const UART_IE_PRXIE: ::std::os::raw::c_uint = 16;
pub const UART_IE_PTXIE: ::std::os::raw::c_uint = 8;
pub const UART_IE_PCTEIE: ::std::os::raw::c_uint = 4;
pub const UART_IE_PSIE: ::std::os::raw::c_uint = 2;
pub const UART_IE_TXFIE: ::std::os::raw::c_uint = 1;
pub const UART_S3_PEF: ::std::os::raw::c_uint = 128;
pub const UART_S3_WBEF: ::std::os::raw::c_uint = 64;
pub const UART_S3_ISD: ::std::os::raw::c_uint = 32;
pub const UART_S3_PRXF: ::std::os::raw::c_uint = 16;
pub const UART_S3_PTXF: ::std::os::raw::c_uint = 8;
pub const UART_S3_PCTEF: ::std::os::raw::c_uint = 4;
pub const UART_S3_PSF: ::std::os::raw::c_uint = 2;
pub const UART_S3_TXFF: ::std::os::raw::c_uint = 1;
pub const UART_S4_INITF: ::std::os::raw::c_uint = 16;
pub const UART_S4_ILCV: ::std::os::raw::c_uint = 2;
pub const UART_S4_FE: ::std::os::raw::c_uint = 1;
pub const NOT_ON_TIMER: ::std::os::raw::c_uint = 0;
pub const HIGH: ::std::os::raw::c_uint = 1;
pub const LOW: ::std::os::raw::c_uint = 0;
pub const INPUT: ::std::os::raw::c_uint = 0;
pub const OUTPUT: ::std::os::raw::c_uint = 1;
pub const INPUT_PULLUP: ::std::os::raw::c_uint = 2;
pub const INPUT_PULLDOWN: ::std::os::raw::c_uint = 3;
pub const OUTPUT_OPENDRAIN: ::std::os::raw::c_uint = 4;
pub const LSBFIRST: ::std::os::raw::c_uint = 0;
pub const MSBFIRST: ::std::os::raw::c_uint = 1;
pub const CHANGE: ::std::os::raw::c_uint = 4;
pub const FALLING: ::std::os::raw::c_uint = 2;
pub const RISING: ::std::os::raw::c_uint = 3;
pub const CORE_NUM_TOTAL_PINS: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_DIGITAL: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_INTERRUPT: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_ANALOG: ::std::os::raw::c_uint = 21;
pub const CORE_NUM_PWM: ::std::os::raw::c_uint = 12;
pub const CORE_PIN0_BIT: ::std::os::raw::c_uint = 16;
pub const CORE_PIN1_BIT: ::std::os::raw::c_uint = 17;
pub const CORE_PIN2_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN3_BIT: ::std::os::raw::c_uint = 12;
pub const CORE_PIN4_BIT: ::std::os::raw::c_uint = 13;
pub const CORE_PIN5_BIT: ::std::os::raw::c_uint = 7;
pub const CORE_PIN6_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_PIN7_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN8_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN9_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN10_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_PIN11_BIT: ::std::os::raw::c_uint = 6;
pub const CORE_PIN12_BIT: ::std::os::raw::c_uint = 7;
pub const CORE_PIN13_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN14_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN15_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN16_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN17_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN18_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN19_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN20_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN21_BIT: ::std::os::raw::c_uint = 6;
pub const CORE_PIN22_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN23_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN24_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN25_BIT: ::std::os::raw::c_uint = 19;
pub const CORE_PIN26_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN27_BIT: ::std::os::raw::c_uint = 9;
pub const CORE_PIN28_BIT: ::std::os::raw::c_uint = 8;
pub const CORE_PIN29_BIT: ::std::os::raw::c_uint = 10;
pub const CORE_PIN30_BIT: ::std::os::raw::c_uint = 11;
pub const CORE_PIN31_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN32_BIT: ::std::os::raw::c_uint = 18;
pub const CORE_PIN33_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_ADC0_PIN: ::std::os::raw::c_uint = 14;
pub const CORE_ADC1_PIN: ::std::os::raw::c_uint = 15;
pub const CORE_ADC2_PIN: ::std::os::raw::c_uint = 16;
pub const CORE_ADC3_PIN: ::std::os::raw::c_uint = 17;
pub const CORE_ADC4_PIN: ::std::os::raw::c_uint = 18;
pub const CORE_ADC5_PIN: ::std::os::raw::c_uint = 19;
pub const CORE_ADC6_PIN: ::std::os::raw::c_uint = 20;
pub const CORE_ADC7_PIN: ::std::os::raw::c_uint = 21;
pub const CORE_ADC8_PIN: ::std::os::raw::c_uint = 22;
pub const CORE_ADC9_PIN: ::std::os::raw::c_uint = 23;
pub const CORE_ADC10_PIN: ::std::os::raw::c_uint = 34;
pub const CORE_ADC11_PIN: ::std::os::raw::c_uint = 35;
pub const CORE_ADC12_PIN: ::std::os::raw::c_uint = 36;
pub const CORE_ADC13_PIN: ::std::os::raw::c_uint = 37;
pub const CORE_RXD0_PIN: ::std::os::raw::c_uint = 0;
pub const CORE_TXD0_PIN: ::std::os::raw::c_uint = 1;
pub const CORE_RXD1_PIN: ::std::os::raw::c_uint = 9;
pub const CORE_TXD1_PIN: ::std::os::raw::c_uint = 10;
pub const CORE_RXD2_PIN: ::std::os::raw::c_uint = 7;
pub const CORE_TXD2_PIN: ::std::os::raw::c_uint = 8;
pub const CORE_INT0_PIN: ::std::os::raw::c_uint = 0;
pub const CORE_INT1_PIN: ::std::os::raw::c_uint = 1;
pub const CORE_INT2_PIN: ::std::os::raw::c_uint = 2;
pub const CORE_INT3_PIN: ::std::os::raw::c_uint = 3;
pub const CORE_INT4_PIN: ::std::os::raw::c_uint = 4;
pub const CORE_INT5_PIN: ::std::os::raw::c_uint = 5;
pub const CORE_INT6_PIN: ::std::os::raw::c_uint = 6;
pub const CORE_INT7_PIN: ::std::os::raw::c_uint = 7;
pub const CORE_INT8_PIN: ::std::os::raw::c_uint = 8;
pub const CORE_INT9_PIN: ::std::os::raw::c_uint = 9;
pub const CORE_INT10_PIN: ::std::os::raw::c_uint = 10;
pub const CORE_INT11_PIN: ::std::os::raw::c_uint = 11;
pub const CORE_INT12_PIN: ::std::os::raw::c_uint = 12;
pub const CORE_INT13_PIN: ::std::os::raw::c_uint = 13;
pub const CORE_INT14_PIN: ::std::os::raw::c_uint = 14;
pub const CORE_INT15_PIN: ::std::os::raw::c_uint = 15;
pub const CORE_INT16_PIN: ::std::os::raw::c_uint = 16;
pub const CORE_INT17_PIN: ::std::os::raw::c_uint = 17;
pub const CORE_INT18_PIN: ::std::os::raw::c_uint = 18;
pub const CORE_INT19_PIN: ::std::os::raw::c_uint = 19;
pub const CORE_INT20_PIN: ::std::os::raw::c_uint = 20;
pub const CORE_INT21_PIN: ::std::os::raw::c_uint = 21;
pub const CORE_INT22_PIN: ::std::os::raw::c_uint = 22;
pub const CORE_INT23_PIN: ::std::os::raw::c_uint = 23;
pub const CORE_INT24_PIN: ::std::os::raw::c_uint = 24;
pub const CORE_INT25_PIN: ::std::os::raw::c_uint = 25;
pub const CORE_INT26_PIN: ::std::os::raw::c_uint = 26;
pub const CORE_INT27_PIN: ::std::os::raw::c_uint = 27;
pub const CORE_INT28_PIN: ::std::os::raw::c_uint = 28;
pub const CORE_INT29_PIN: ::std::os::raw::c_uint = 29;
pub const CORE_INT30_PIN: ::std::os::raw::c_uint = 30;
pub const CORE_INT31_PIN: ::std::os::raw::c_uint = 31;
pub const CORE_INT32_PIN: ::std::os::raw::c_uint = 32;
pub const CORE_INT33_PIN: ::std::os::raw::c_uint = 33;
pub const CORE_INT_EVERY_PIN: ::std::os::raw::c_uint = 1;
pub const DEFAULT: ::std::os::raw::c_uint = 0;
pub const INTERNAL: ::std::os::raw::c_uint = 2;
pub const INTERNAL1V2: ::std::os::raw::c_uint = 2;
pub const INTERNAL1V1: ::std::os::raw::c_uint = 2;
pub const EXTERNAL: ::std::os::raw::c_uint = 0;
pub const SERIAL: ::std::os::raw::c_uint = 0;
pub const DISPLAY: ::std::os::raw::c_uint = 1;
pub const SERIAL_7E1: ::std::os::raw::c_uint = 2;
pub const SERIAL_7O1: ::std::os::raw::c_uint = 3;
pub const SERIAL_8N1: ::std::os::raw::c_uint = 0;
pub const SERIAL_8N2: ::std::os::raw::c_uint = 4;
pub const SERIAL_8E1: ::std::os::raw::c_uint = 6;
pub const SERIAL_8O1: ::std::os::raw::c_uint = 7;
pub const SERIAL_7E1_RXINV: ::std::os::raw::c_uint = 18;
pub const SERIAL_7O1_RXINV: ::std::os::raw::c_uint = 19;
pub const SERIAL_8N1_RXINV: ::std::os::raw::c_uint = 16;
pub const SERIAL_8N2_RXINV: ::std::os::raw::c_uint = 20;
pub const SERIAL_8E1_RXINV: ::std::os::raw::c_uint = 22;
pub const SERIAL_8O1_RXINV: ::std::os::raw::c_uint = 23;
pub const SERIAL_7E1_TXINV: ::std::os::raw::c_uint = 34;
pub const SERIAL_7O1_TXINV: ::std::os::raw::c_uint = 35;
pub const SERIAL_8N1_TXINV: ::std::os::raw::c_uint = 32;
pub const SERIAL_8N2_TXINV: ::std::os::raw::c_uint = 36;
pub const SERIAL_8E1_TXINV: ::std::os::raw::c_uint = 38;
pub const SERIAL_8O1_TXINV: ::std::os::raw::c_uint = 39;
pub const SERIAL_7E1_RXINV_TXINV: ::std::os::raw::c_uint = 50;
pub const SERIAL_7O1_RXINV_TXINV: ::std::os::raw::c_uint = 51;
pub const SERIAL_8N1_RXINV_TXINV: ::std::os::raw::c_uint = 48;
pub const SERIAL_8N2_RXINV_TXINV: ::std::os::raw::c_uint = 52;
pub const SERIAL_8E1_RXINV_TXINV: ::std::os::raw::c_uint = 54;
pub const SERIAL_8O1_RXINV_TXINV: ::std::os::raw::c_uint = 55;
pub const DEC: ::std::os::raw::c_uint = 10;
pub const HEX: ::std::os::raw::c_uint = 16;
pub const OCT: ::std::os::raw::c_uint = 8;
pub const BIN: ::std::os::raw::c_uint = 2;
pub const BYTE: ::std::os::raw::c_uint = 0;
pub const PINB0: ::std::os::raw::c_uint = 0;
pub const PINB1: ::std::os::raw::c_uint = 1;
pub const PINB2: ::std::os::raw::c_uint = 2;
pub const PINB3: ::std::os::raw::c_uint = 3;
pub const PINB4: ::std::os::raw::c_uint = 4;
pub const PINB5: ::std::os::raw::c_uint = 5;
pub const PINB6: ::std::os::raw::c_uint = 6;
pub const PINB7: ::std::os::raw::c_uint = 7;
pub const DDB0: ::std::os::raw::c_uint = 0;
pub const DDB1: ::std::os::raw::c_uint = 1;
pub const DDB2: ::std::os::raw::c_uint = 2;
pub const DDB3: ::std::os::raw::c_uint = 3;
pub const DDB4: ::std::os::raw::c_uint = 4;
pub const DDB5: ::std::os::raw::c_uint = 5;
pub const DDB6: ::std::os::raw::c_uint = 6;
pub const DDB7: ::std::os::raw::c_uint = 7;
pub const PORTB0: ::std::os::raw::c_uint = 0;
pub const PORTB1: ::std::os::raw::c_uint = 1;
pub const PORTB2: ::std::os::raw::c_uint = 2;
pub const PORTB3: ::std::os::raw::c_uint = 3;
pub const PORTB4: ::std::os::raw::c_uint = 4;
pub const PORTB5: ::std::os::raw::c_uint = 5;
pub const PORTB6: ::std::os::raw::c_uint = 6;
pub const PORTB7: ::std::os::raw::c_uint = 7;
pub const PINC0: ::std::os::raw::c_uint = 0;
pub const PINC1: ::std::os::raw::c_uint = 1;
pub const PINC2: ::std::os::raw::c_uint = 2;
pub const PINC3: ::std::os::raw::c_uint = 3;
pub const PINC4: ::std::os::raw::c_uint = 4;
pub const PINC5: ::std::os::raw::c_uint = 5;
pub const PINC6: ::std::os::raw::c_uint = 6;
pub const DDC0: ::std::os::raw::c_uint = 0;
pub const DDC1: ::std::os::raw::c_uint = 1;
pub const DDC2: ::std::os::raw::c_uint = 2;
pub const DDC3: ::std::os::raw::c_uint = 3;
pub const DDC4: ::std::os::raw::c_uint = 4;
pub const DDC5: ::std::os::raw::c_uint = 5;
pub const DDC6: ::std::os::raw::c_uint = 6;
pub const PORTC0: ::std::os::raw::c_uint = 0;
pub const PORTC1: ::std::os::raw::c_uint = 1;
pub const PORTC2: ::std::os::raw::c_uint = 2;
pub const PORTC3: ::std::os::raw::c_uint = 3;
pub const PORTC4: ::std::os::raw::c_uint = 4;
pub const PORTC5: ::std::os::raw::c_uint = 5;
pub const PORTC6: ::std::os::raw::c_uint = 6;
pub const PIND0: ::std::os::raw::c_uint = 0;
pub const PIND1: ::std::os::raw::c_uint = 1;
pub const PIND2: ::std::os::raw::c_uint = 2;
pub const PIND3: ::std::os::raw::c_uint = 3;
pub const PIND4: ::std::os::raw::c_uint = 4;
pub const PIND5: ::std::os::raw::c_uint = 5;
pub const PIND6: ::std::os::raw::c_uint = 6;
pub const PIND7: ::std::os::raw::c_uint = 7;
pub const DDD0: ::std::os::raw::c_uint = 0;
pub const DDD1: ::std::os::raw::c_uint = 1;
pub const DDD2: ::std::os::raw::c_uint = 2;
pub const DDD3: ::std::os::raw::c_uint = 3;
pub const DDD4: ::std::os::raw::c_uint = 4;
pub const DDD5: ::std::os::raw::c_uint = 5;
pub const DDD6: ::std::os::raw::c_uint = 6;
pub const DDD7: ::std::os::raw::c_uint = 7;
pub const PORTD0: ::std::os::raw::c_uint = 0;
pub const PORTD1: ::std::os::raw::c_uint = 1;
pub const PORTD2: ::std::os::raw::c_uint = 2;
pub const PORTD3: ::std::os::raw::c_uint = 3;
pub const PORTD4: ::std::os::raw::c_uint = 4;
pub const PORTD5: ::std::os::raw::c_uint = 5;
pub const PORTD6: ::std::os::raw::c_uint = 6;
pub const PORTD7: ::std::os::raw::c_uint = 7;
pub const SPIE: ::std::os::raw::c_uint = 7;
pub const SPE: ::std::os::raw::c_uint = 6;
pub const DORD: ::std::os::raw::c_uint = 5;
pub const MSTR: ::std::os::raw::c_uint = 4;
pub const CPOL: ::std::os::raw::c_uint = 3;
pub const CPHA: ::std::os::raw::c_uint = 2;
pub const SPR1: ::std::os::raw::c_uint = 1;
pub const SPR0: ::std::os::raw::c_uint = 0;
pub const SPIF: ::std::os::raw::c_uint = 7;
pub const WCOL: ::std::os::raw::c_uint = 6;
pub const SPI2X: ::std::os::raw::c_uint = 0;
pub const EIMSK_pA: ::std::os::raw::c_uint = 16777240;
pub const EIMSK_pB: ::std::os::raw::c_uint = 34537475;
pub const EIMSK_pC: ::std::os::raw::c_uint = 2025897472;
pub const EIMSK_pD: ::std::os::raw::c_uint = 3162596;
pub const EIMSK_pE: ::std::os::raw::c_uint = 2214592512;
pub const ENDPOINT_UNUSED: ::std::os::raw::c_uint = 0;
pub const ENDPOINT_TRANSIMIT_ONLY: ::std::os::raw::c_uint = 21;
pub const ENDPOINT_RECEIVE_ONLY: ::std::os::raw::c_uint = 25;
pub const ENDPOINT_TRANSMIT_AND_RECEIVE: ::std::os::raw::c_uint = 29;
pub const ENDPOINT_RECEIVE_ISOCHRONOUS: ::std::os::raw::c_uint = 24;
pub const ENDPOINT_TRANSMIT_ISOCHRONOUS: ::std::os::raw::c_uint = 20;
pub const VENDOR_ID: ::std::os::raw::c_uint = 5824;
pub const PRODUCT_ID: ::std::os::raw::c_uint = 1155;
pub const DEVICE_CLASS: ::std::os::raw::c_uint = 2;
pub const MANUFACTURER_NAME_LEN: ::std::os::raw::c_uint = 11;
pub const PRODUCT_NAME_LEN: ::std::os::raw::c_uint = 10;
pub const EP0_SIZE: ::std::os::raw::c_uint = 64;
pub const NUM_ENDPOINTS: ::std::os::raw::c_uint = 4;
pub const NUM_USB_BUFFERS: ::std::os::raw::c_uint = 12;
pub const NUM_INTERFACE: ::std::os::raw::c_uint = 2;
pub const CDC_STATUS_INTERFACE: ::std::os::raw::c_uint = 0;
pub const CDC_DATA_INTERFACE: ::std::os::raw::c_uint = 1;
pub const CDC_ACM_ENDPOINT: ::std::os::raw::c_uint = 2;
pub const CDC_RX_ENDPOINT: ::std::os::raw::c_uint = 3;
pub const CDC_TX_ENDPOINT: ::std::os::raw::c_uint = 4;
pub const CDC_ACM_SIZE: ::std::os::raw::c_uint = 16;
pub const CDC_RX_SIZE: ::std::os::raw::c_uint = 64;
pub const CDC_TX_SIZE: ::std::os::raw::c_uint = 64;
pub const USB_SERIAL_DTR: ::std::os::raw::c_uint = 1;
pub const USB_SERIAL_RTS: ::std::os::raw::c_uint = 2;
pub const SHIFT_MASK: ::std::os::raw::c_uint = 64;
pub const KEYCODE_MASK: ::std::os::raw::c_uint = 127;
pub const SPI_HAS_TRANSACTION: ::std::os::raw::c_uint = 1;
pub const SPI_MODE0: ::std::os::raw::c_uint = 0;
pub const SPI_MODE1: ::std::os::raw::c_uint = 4;
pub const SPI_MODE2: ::std::os::raw::c_uint = 8;
pub const SPI_MODE3: ::std::os::raw::c_uint = 12;
pub const SPI_CLOCK_DIV4: ::std::os::raw::c_uint = 0;
pub const SPI_CLOCK_DIV16: ::std::os::raw::c_uint = 1;
pub const SPI_CLOCK_DIV64: ::std::os::raw::c_uint = 2;
pub const SPI_CLOCK_DIV128: ::std::os::raw::c_uint = 3;
pub const SPI_CLOCK_DIV2: ::std::os::raw::c_uint = 4;
pub const SPI_CLOCK_DIV8: ::std::os::raw::c_uint = 5;
pub const SPI_CLOCK_DIV32: ::std::os::raw::c_uint = 6;
pub const SPI_MODE_MASK: ::std::os::raw::c_uint = 12;
pub const SPI_CLOCK_MASK: ::std::os::raw::c_uint = 3;
pub const SPI_2XCLOCK_MASK: ::std::os::raw::c_uint = 1;
pub const SPI_HAS_NOTUSINGINTERRUPT: ::std::os::raw::c_uint = 1;
pub const BUFFER_LENGTH: ::std::os::raw::c_uint = 32;
pub const WIRE_HAS_END: ::std::os::raw::c_uint = 1;
pub type prog_void = ::std::os::raw::c_void;
pub type prog_char = ::std::os::raw::c_uchar;
pub type prog_uchar = ::std::os::raw::c_uchar;
pub type prog_int8_t = i8;
pub type prog_uint8_t = u8;
pub type prog_int16_t = i16;
pub type prog_uint16_t = u16;
pub type prog_int32_t = i32;
pub type prog_uint32_t = u32;
pub type prog_int64_t = i64;
pub type prog_uint64_t = u64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub enum IRQ_NUMBER_t {
    IRQ_DMA_CH0 = 0,
    IRQ_DMA_CH1 = 1,
    IRQ_DMA_CH2 = 2,
    IRQ_DMA_CH3 = 3,
    IRQ_DMA_CH4 = 4,
    IRQ_DMA_CH5 = 5,
    IRQ_DMA_CH6 = 6,
    IRQ_DMA_CH7 = 7,
    IRQ_DMA_CH8 = 8,
    IRQ_DMA_CH9 = 9,
    IRQ_DMA_CH10 = 10,
    IRQ_DMA_CH11 = 11,
    IRQ_DMA_CH12 = 12,
    IRQ_DMA_CH13 = 13,
    IRQ_DMA_CH14 = 14,
    IRQ_DMA_CH15 = 15,
    IRQ_DMA_ERROR = 16,
    IRQ_FTFL_COMPLETE = 18,
    IRQ_FTFL_COLLISION = 19,
    IRQ_LOW_VOLTAGE = 20,
    IRQ_LLWU = 21,
    IRQ_WDOG = 22,
    IRQ_I2C0 = 24,
    IRQ_I2C1 = 25,
    IRQ_SPI0 = 26,
    IRQ_SPI1 = 27,
    IRQ_CAN_MESSAGE = 29,
    IRQ_CAN_BUS_OFF = 30,
    IRQ_CAN_ERROR = 31,
    IRQ_CAN_TX_WARN = 32,
    IRQ_CAN_RX_WARN = 33,
    IRQ_CAN_WAKEUP = 34,
    IRQ_I2S0_TX = 35,
    IRQ_I2S0_RX = 36,
    IRQ_UART0_LON = 44,
    IRQ_UART0_STATUS = 45,
    IRQ_UART0_ERROR = 46,
    IRQ_UART1_STATUS = 47,
    IRQ_UART1_ERROR = 48,
    IRQ_UART2_STATUS = 49,
    IRQ_UART2_ERROR = 50,
    IRQ_ADC0 = 57,
    IRQ_ADC1 = 58,
    IRQ_CMP0 = 59,
    IRQ_CMP1 = 60,
    IRQ_CMP2 = 61,
    IRQ_FTM0 = 62,
    IRQ_FTM1 = 63,
    IRQ_FTM2 = 64,
    IRQ_CMT = 65,
    IRQ_RTC_ALARM = 66,
    IRQ_RTC_SECOND = 67,
    IRQ_PIT_CH0 = 68,
    IRQ_PIT_CH1 = 69,
    IRQ_PIT_CH2 = 70,
    IRQ_PIT_CH3 = 71,
    IRQ_PDB = 72,
    IRQ_USBOTG = 73,
    IRQ_USBDCD = 74,
    IRQ_DAC0 = 81,
    IRQ_TSI = 83,
    IRQ_MCG = 84,
    IRQ_LPTMR = 85,
    IRQ_PORTA = 87,
    IRQ_PORTB = 88,
    IRQ_PORTC = 89,
    IRQ_PORTD = 90,
    IRQ_PORTE = 91,
    IRQ_SOFTWARE = 94,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct kinetis_h_unnamed_1 {
    pub C1: u8,
    pub C2: u8,
    pub C3: u8,
    pub C4: u8,
    pub C5: u8,
    pub C6: u8,
    pub S: u8,
    pub unused1: u8,
    pub SC: u8,
    pub unused2: u8,
    pub ATCVH: u8,
    pub ATCVL: u8,
    pub C7: u8,
    pub C8: u8,
    pub C9: u8,
    pub unused3: u8,
    pub C11: u8,
    pub C12: u8,
    pub S2: u8,
    pub T3: u8,
}
impl ::std::clone::Clone for kinetis_h_unnamed_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_1() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_1>() , 20usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_1>() , 1usize);
}
pub type KINETIS_MCG_t = kinetis_h_unnamed_1;
#[repr(C)]
#[derive(Debug)]
pub struct kinetis_h_unnamed_2 {
    pub MCR: u32,
    pub unused1: u32,
    pub TCR: u32,
    pub CTAR0: u32,
    pub CTAR1: u32,
    pub CTAR2: u32,
    pub CTAR3: u32,
    pub CTAR4: u32,
    pub CTAR5: u32,
    pub CTAR6: u32,
    pub CTAR7: u32,
    pub SR: u32,
    pub RSER: u32,
    pub PUSHR: u32,
    pub POPR: u32,
    pub TXFR: [u32; 16usize],
    pub RXFR: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_2() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_2>() , 188usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_2>() , 4usize);
}
pub type KINETISK_SPI_t = kinetis_h_unnamed_2;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct kinetis_h_unnamed_3 {
    pub A1: u8,
    pub F: u8,
    pub C1: u8,
    pub S: u8,
    pub D: u8,
    pub C2: u8,
    pub FLT: u8,
    pub RA: u8,
    pub SMB: u8,
    pub A2: u8,
    pub SLTH: u8,
    pub SLTL: u8,
}
impl ::std::clone::Clone for kinetis_h_unnamed_3 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_3() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_3>() , 12usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_3>() , 1usize);
}
pub type KINETIS_I2C_t = kinetis_h_unnamed_3;
#[repr(C, packed)]
#[derive(Debug, Copy)]
pub struct kinetis_h_unnamed_4 {
    pub BDH: u8,
    pub BDL: u8,
    pub C1: u8,
    pub C2: u8,
    pub S1: u8,
    pub S2: u8,
    pub C3: u8,
    pub D: u8,
    pub MA1: u8,
    pub MA2: u8,
    pub C4: u8,
    pub C5: u8,
    pub ED: u8,
    pub MODEM: u8,
    pub IR: u8,
    pub unused1: u8,
    pub PFIFO: u8,
    pub CFIFO: u8,
    pub SFIFO: u8,
    pub TWFIFO: u8,
    pub TCFIFO: u8,
    pub RWFIFO: u8,
    pub RCFIFO: u8,
    pub unused2: u8,
    pub C7816: u8,
    pub IE7816: u8,
    pub IS7816: u8,
    pub kinetis_h_unnamed_4_kinetis_h_unnamed_5: kinetis_h_unnamed_4_kinetis_h_unnamed_5,
    pub WN7816: u8,
    pub WF7816: u8,
    pub ET7816: u8,
    pub TL7816: u8,
    pub unused3: u8,
    pub C6: u8,
    pub PCTH: u8,
    pub PCTL: u8,
    pub B1T: u8,
    pub SDTH: u8,
    pub SDTL: u8,
    pub PRE: u8,
    pub TPL: u8,
    pub IE: u8,
    pub WB: u8,
    pub S3: u8,
    pub S4: u8,
    pub RPL: u8,
    pub RPREL: u8,
    pub CPW: u8,
    pub RIDT: u8,
    pub TIDT: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct kinetis_h_unnamed_4_kinetis_h_unnamed_5 {
    pub WP7816T0: __BindgenUnionField<u8>,
    pub WP7816T1: __BindgenUnionField<u8>,
    pub _bindgen_data_: u8,
}
impl kinetis_h_unnamed_4_kinetis_h_unnamed_5 {
    pub unsafe fn WP7816T0(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn WP7816T1(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for kinetis_h_unnamed_4_kinetis_h_unnamed_5 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_4_kinetis_h_unnamed_5() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_4_kinetis_h_unnamed_5>()
               , 1usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_4_kinetis_h_unnamed_5>()
               , 1usize);
}
impl ::std::clone::Clone for kinetis_h_unnamed_4 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_4() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_4>() , 50usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_4>() , 1usize);
}
pub type KINETISK_UART_t = kinetis_h_unnamed_4;
///////////////////////////////////
#[repr(C, packed)]
#[derive(Debug, Copy)]
pub struct kinetis_h_unnamed_6 {
    pub BAUD: u32,
    pub STAT: u32,
    pub CTRL: u32,
    pub DATA: u32,
    pub MATCH: u32,
    pub MODIR: u32,
}
impl ::std::clone::Clone for kinetis_h_unnamed_6 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_kinetis_h_unnamed_6() {
    assert_eq!(::std::mem::size_of::<kinetis_h_unnamed_6>() , 24usize);
    assert_eq!(::std::mem::align_of::<kinetis_h_unnamed_6>() , 1usize);
}
pub type KINETISK_LPUART_t = kinetis_h_unnamed_6;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct digital_pin_bitband_and_config_table_struct {
    pub reg: *mut u32,
    pub config: *mut u32,
}
impl ::std::clone::Clone for digital_pin_bitband_and_config_table_struct {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_digital_pin_bitband_and_config_table_struct() {
    assert_eq!(::std::mem::size_of::<digital_pin_bitband_and_config_table_struct>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<digital_pin_bitband_and_config_table_struct>()
               , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct teensy3_clock_class;
impl ::std::clone::Clone for teensy3_clock_class {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    fn _ZN19teensy3_clock_class3getEv() -> ::std::os::raw::c_ulong;
    fn _ZN19teensy3_clock_class3setEm(t: ::std::os::raw::c_ulong);
    fn _ZN19teensy3_clock_class10compensateEi(adj: ::std::os::raw::c_int);
}
impl teensy3_clock_class {
    #[inline]
    pub unsafe fn get() -> ::std::os::raw::c_ulong {
        _ZN19teensy3_clock_class3getEv()
    }
    #[inline]
    pub unsafe fn set(t: ::std::os::raw::c_ulong) {
        _ZN19teensy3_clock_class3setEm(t)
    }
    #[inline]
    pub unsafe fn compensate(adj: ::std::os::raw::c_int) {
        _ZN19teensy3_clock_class10compensateEi(adj)
    }
}
pub type word = ::std::os::raw::c_uint;
pub type byte = u8;
pub type boolean = bool;
pub enum __FlashStringHelper { }
#[repr(C)]
#[derive(Debug)]
pub struct String {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub capacity: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_String() {
    assert_eq!(::std::mem::size_of::<String>() , 16usize);
    assert_eq!(::std::mem::align_of::<String>() , 4usize);
}
extern "C" {
    fn _ZN6String7reserveEj(this: *mut String, size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String6lengthEv(this: *mut String) -> ::std::os::raw::c_uint;
    fn _ZN6String4copyEPKcj(this: *mut String,
                            cstr: *const ::std::os::raw::c_uchar,
                            length: ::std::os::raw::c_uint) -> *mut String;
    fn _ZN6String4copyEPK19__FlashStringHelper(this: *mut String,
                                               s: *const __FlashStringHelper)
     -> *mut String;
    fn _ZN6String4moveERS_(this: *mut String, rhs: *mut String);
    fn _ZN6String6appendERKS_(this: *mut String, str: *const String)
     -> *mut String;
    fn _ZN6String6appendEPKc(this: *mut String,
                             cstr: *const ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6appendEPK19__FlashStringHelper(this: *mut String,
                                                 s:
                                                     *const __FlashStringHelper)
     -> *mut String;
    fn _ZN6String6appendEc(this: *mut String, c: ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6appendEh(this: *mut String, c: ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6appendEi(this: *mut String, num: ::std::os::raw::c_int)
     -> *mut String;
    fn _ZN6String6appendEj(this: *mut String, num: ::std::os::raw::c_uint)
     -> *mut String;
    fn _ZN6String6appendEl(this: *mut String, num: ::std::os::raw::c_long)
     -> *mut String;
    fn _ZN6String6appendEm(this: *mut String, num: ::std::os::raw::c_ulong)
     -> *mut String;
    fn _ZN6String6appendEf(this: *mut String, num: f32) -> *mut String;
    fn _ZN6String6appendEd(this: *mut String, num: f64) -> *mut String;
    fn _ZN6String6concatERKS_(this: *mut String, str: *const String)
     -> *mut String;
    fn _ZN6String6concatEPKc(this: *mut String,
                             cstr: *const ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6concatEPK19__FlashStringHelper(this: *mut String,
                                                 pgmstr:
                                                     *const __FlashStringHelper)
     -> *mut String;
    fn _ZN6String6concatEc(this: *mut String, c: ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6concatEh(this: *mut String, c: ::std::os::raw::c_uchar)
     -> *mut String;
    fn _ZN6String6concatEi(this: *mut String, num: ::std::os::raw::c_int)
     -> *mut String;
    fn _ZN6String6concatEj(this: *mut String, num: ::std::os::raw::c_uint)
     -> *mut String;
    fn _ZN6String6concatEl(this: *mut String, num: ::std::os::raw::c_long)
     -> *mut String;
    fn _ZN6String6concatEm(this: *mut String, num: ::std::os::raw::c_ulong)
     -> *mut String;
    fn _ZN6String6concatEf(this: *mut String, num: f32) -> *mut String;
    fn _ZN6String6concatEd(this: *mut String, num: f64) -> *mut String;
    fn _ZNK6String9compareToERKS_(this: *mut String, s: *const String)
     -> ::std::os::raw::c_int;
    fn _ZNK6String6equalsERKS_(this: *mut String, s: *const String)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String6equalsEPKc(this: *mut String,
                              cstr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String16equalsIgnoreCaseERKS_(this: *mut String, s: *const String)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String10startsWithERKS_(this: *mut String, prefix: *const String)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String10startsWithERKS_j(this: *mut String, prefix: *const String,
                                     offset: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String8endsWithERKS_(this: *mut String, suffix: *const String)
     -> ::std::os::raw::c_uchar;
    fn _ZNK6String6charAtEj(this: *mut String, index: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
    fn _ZN6String9setCharAtEjc(this: *mut String,
                               index: ::std::os::raw::c_uint,
                               c: ::std::os::raw::c_uchar);
    fn _ZNK6String8getBytesEPhjj(this: *mut String,
                                 buf: *mut ::std::os::raw::c_uchar,
                                 bufsize: ::std::os::raw::c_uint,
                                 index: ::std::os::raw::c_uint);
    fn _ZNK6String11toCharArrayEPcjj(this: *mut String,
                                     buf: *mut ::std::os::raw::c_uchar,
                                     bufsize: ::std::os::raw::c_uint,
                                     index: ::std::os::raw::c_uint);
    fn _ZNK6String5c_strEv(this: *mut String)
     -> *const ::std::os::raw::c_uchar;
    fn _ZNK6String7indexOfEc(this: *mut String, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    fn _ZNK6String7indexOfEcj(this: *mut String, ch: ::std::os::raw::c_uchar,
                              fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    fn _ZNK6String7indexOfERKS_(this: *mut String, str: *const String)
     -> ::std::os::raw::c_int;
    fn _ZNK6String7indexOfERKS_j(this: *mut String, str: *const String,
                                 fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    fn _ZNK6String11lastIndexOfEc(this: *mut String,
                                  ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    fn _ZNK6String11lastIndexOfEcj(this: *mut String,
                                   ch: ::std::os::raw::c_uchar,
                                   fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    fn _ZNK6String11lastIndexOfERKS_(this: *mut String, str: *const String)
     -> ::std::os::raw::c_int;
    fn _ZNK6String11lastIndexOfERKS_j(this: *mut String, str: *const String,
                                      fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    fn _ZNK6String9substringEj(this: *mut String,
                               beginIndex: ::std::os::raw::c_uint) -> String;
    fn _ZNK6String9substringEjj(this: *mut String,
                                beginIndex: ::std::os::raw::c_uint,
                                endIndex: ::std::os::raw::c_uint) -> String;
    fn _ZN6String7replaceEcc(this: *mut String, find: ::std::os::raw::c_uchar,
                             replace: ::std::os::raw::c_uchar) -> *mut String;
    fn _ZN6String7replaceERKS_S1_(this: *mut String, find: *const String,
                                  replace: *const String) -> *mut String;
    fn _ZN6String6removeEj(this: *mut String, index: ::std::os::raw::c_uint)
     -> *mut String;
    fn _ZN6String6removeEjj(this: *mut String, index: ::std::os::raw::c_uint,
                            count: ::std::os::raw::c_uint) -> *mut String;
    fn _ZN6String11toLowerCaseEv(this: *mut String) -> *mut String;
    fn _ZN6String11toUpperCaseEv(this: *mut String) -> *mut String;
    fn _ZN6String4trimEv(this: *mut String) -> *mut String;
    fn _ZNK6String5toIntEv(this: *mut String) -> ::std::os::raw::c_long;
    fn _ZNK6String7toFloatEv(this: *mut String) -> f32;
    fn _ZN6String4initEv(this: *mut String);
    fn _ZN6String12changeBufferEj(this: *mut String,
                                  maxStrLen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
    fn _ZN6String6appendEPKcj(this: *mut String,
                              cstr: *const ::std::os::raw::c_uchar,
                              length: ::std::os::raw::c_uint) -> *mut String;
}
impl String {
    #[inline]
    pub unsafe fn reserve(&mut self, size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        _ZN6String7reserveEj(&mut *self, size)
    }
    #[inline]
    pub unsafe fn length(&mut self) -> ::std::os::raw::c_uint {
        _ZNK6String6lengthEv(&mut *self)
    }
    #[inline]
    pub unsafe fn copy(&mut self, cstr: *const ::std::os::raw::c_uchar,
                       length: ::std::os::raw::c_uint) -> *mut String {
        _ZN6String4copyEPKcj(&mut *self, cstr, length)
    }
    #[inline]
    pub unsafe fn copy1(&mut self, s: *const __FlashStringHelper)
     -> *mut String {
        _ZN6String4copyEPK19__FlashStringHelper(&mut *self, s)
    }
    #[inline]
    pub unsafe fn move_(&mut self, rhs: *mut String) {
        _ZN6String4moveERS_(&mut *self, rhs)
    }
    #[inline]
    pub unsafe fn append(&mut self, str: *const String) -> *mut String {
        _ZN6String6appendERKS_(&mut *self, str)
    }
    #[inline]
    pub unsafe fn append1(&mut self, cstr: *const ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6appendEPKc(&mut *self, cstr)
    }
    #[inline]
    pub unsafe fn append2(&mut self, s: *const __FlashStringHelper)
     -> *mut String {
        _ZN6String6appendEPK19__FlashStringHelper(&mut *self, s)
    }
    #[inline]
    pub unsafe fn append3(&mut self, c: ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6appendEc(&mut *self, c)
    }
    #[inline]
    pub unsafe fn append4(&mut self, c: ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6appendEh(&mut *self, c)
    }
    #[inline]
    pub unsafe fn append5(&mut self, num: ::std::os::raw::c_int)
     -> *mut String {
        _ZN6String6appendEi(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append6(&mut self, num: ::std::os::raw::c_uint)
     -> *mut String {
        _ZN6String6appendEj(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append7(&mut self, num: ::std::os::raw::c_long)
     -> *mut String {
        _ZN6String6appendEl(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append8(&mut self, num: ::std::os::raw::c_ulong)
     -> *mut String {
        _ZN6String6appendEm(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append9(&mut self, num: f32) -> *mut String {
        _ZN6String6appendEf(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append10(&mut self, num: f64) -> *mut String {
        _ZN6String6appendEd(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat(&mut self, str: *const String) -> *mut String {
        _ZN6String6concatERKS_(&mut *self, str)
    }
    #[inline]
    pub unsafe fn concat1(&mut self, cstr: *const ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6concatEPKc(&mut *self, cstr)
    }
    #[inline]
    pub unsafe fn concat2(&mut self, pgmstr: *const __FlashStringHelper)
     -> *mut String {
        _ZN6String6concatEPK19__FlashStringHelper(&mut *self, pgmstr)
    }
    #[inline]
    pub unsafe fn concat3(&mut self, c: ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6concatEc(&mut *self, c)
    }
    #[inline]
    pub unsafe fn concat4(&mut self, c: ::std::os::raw::c_uchar)
     -> *mut String {
        _ZN6String6concatEh(&mut *self, c)
    }
    #[inline]
    pub unsafe fn concat5(&mut self, num: ::std::os::raw::c_int)
     -> *mut String {
        _ZN6String6concatEi(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat6(&mut self, num: ::std::os::raw::c_uint)
     -> *mut String {
        _ZN6String6concatEj(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat7(&mut self, num: ::std::os::raw::c_long)
     -> *mut String {
        _ZN6String6concatEl(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat8(&mut self, num: ::std::os::raw::c_ulong)
     -> *mut String {
        _ZN6String6concatEm(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat9(&mut self, num: f32) -> *mut String {
        _ZN6String6concatEf(&mut *self, num)
    }
    #[inline]
    pub unsafe fn concat10(&mut self, num: f64) -> *mut String {
        _ZN6String6concatEd(&mut *self, num)
    }
    #[inline]
    pub unsafe fn compareTo(&mut self, s: *const String)
     -> ::std::os::raw::c_int {
        _ZNK6String9compareToERKS_(&mut *self, s)
    }
    #[inline]
    pub unsafe fn equals(&mut self, s: *const String)
     -> ::std::os::raw::c_uchar {
        _ZNK6String6equalsERKS_(&mut *self, s)
    }
    #[inline]
    pub unsafe fn equals1(&mut self, cstr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_uchar {
        _ZNK6String6equalsEPKc(&mut *self, cstr)
    }
    #[inline]
    pub unsafe fn equalsIgnoreCase(&mut self, s: *const String)
     -> ::std::os::raw::c_uchar {
        _ZNK6String16equalsIgnoreCaseERKS_(&mut *self, s)
    }
    #[inline]
    pub unsafe fn startsWith(&mut self, prefix: *const String)
     -> ::std::os::raw::c_uchar {
        _ZNK6String10startsWithERKS_(&mut *self, prefix)
    }
    #[inline]
    pub unsafe fn startsWith1(&mut self, prefix: *const String,
                              offset: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        _ZNK6String10startsWithERKS_j(&mut *self, prefix, offset)
    }
    #[inline]
    pub unsafe fn endsWith(&mut self, suffix: *const String)
     -> ::std::os::raw::c_uchar {
        _ZNK6String8endsWithERKS_(&mut *self, suffix)
    }
    #[inline]
    pub unsafe fn charAt(&mut self, index: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        _ZNK6String6charAtEj(&mut *self, index)
    }
    #[inline]
    pub unsafe fn setCharAt(&mut self, index: ::std::os::raw::c_uint,
                            c: ::std::os::raw::c_uchar) {
        _ZN6String9setCharAtEjc(&mut *self, index, c)
    }
    #[inline]
    pub unsafe fn getBytes(&mut self, buf: *mut ::std::os::raw::c_uchar,
                           bufsize: ::std::os::raw::c_uint,
                           index: ::std::os::raw::c_uint) {
        _ZNK6String8getBytesEPhjj(&mut *self, buf, bufsize, index)
    }
    #[inline]
    pub unsafe fn toCharArray(&mut self, buf: *mut ::std::os::raw::c_uchar,
                              bufsize: ::std::os::raw::c_uint,
                              index: ::std::os::raw::c_uint) {
        _ZNK6String11toCharArrayEPcjj(&mut *self, buf, bufsize, index)
    }
    #[inline]
    pub unsafe fn c_str(&mut self) -> *const ::std::os::raw::c_uchar {
        _ZNK6String5c_strEv(&mut *self)
    }
    #[inline]
    pub unsafe fn indexOf(&mut self, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        _ZNK6String7indexOfEc(&mut *self, ch)
    }
    #[inline]
    pub unsafe fn indexOf1(&mut self, ch: ::std::os::raw::c_uchar,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        _ZNK6String7indexOfEcj(&mut *self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn indexOf2(&mut self, str: *const String)
     -> ::std::os::raw::c_int {
        _ZNK6String7indexOfERKS_(&mut *self, str)
    }
    #[inline]
    pub unsafe fn indexOf3(&mut self, str: *const String,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        _ZNK6String7indexOfERKS_j(&mut *self, str, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf(&mut self, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        _ZNK6String11lastIndexOfEc(&mut *self, ch)
    }
    #[inline]
    pub unsafe fn lastIndexOf1(&mut self, ch: ::std::os::raw::c_uchar,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        _ZNK6String11lastIndexOfEcj(&mut *self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf2(&mut self, str: *const String)
     -> ::std::os::raw::c_int {
        _ZNK6String11lastIndexOfERKS_(&mut *self, str)
    }
    #[inline]
    pub unsafe fn lastIndexOf3(&mut self, str: *const String,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        _ZNK6String11lastIndexOfERKS_j(&mut *self, str, fromIndex)
    }
    #[inline]
    pub unsafe fn substring(&mut self, beginIndex: ::std::os::raw::c_uint)
     -> String {
        _ZNK6String9substringEj(&mut *self, beginIndex)
    }
    #[inline]
    pub unsafe fn substring1(&mut self, beginIndex: ::std::os::raw::c_uint,
                             endIndex: ::std::os::raw::c_uint) -> String {
        _ZNK6String9substringEjj(&mut *self, beginIndex, endIndex)
    }
    #[inline]
    pub unsafe fn replace(&mut self, find: ::std::os::raw::c_uchar,
                          replace: ::std::os::raw::c_uchar) -> *mut String {
        _ZN6String7replaceEcc(&mut *self, find, replace)
    }
    #[inline]
    pub unsafe fn replace1(&mut self, find: *const String,
                           replace: *const String) -> *mut String {
        _ZN6String7replaceERKS_S1_(&mut *self, find, replace)
    }
    #[inline]
    pub unsafe fn remove(&mut self, index: ::std::os::raw::c_uint)
     -> *mut String {
        _ZN6String6removeEj(&mut *self, index)
    }
    #[inline]
    pub unsafe fn remove1(&mut self, index: ::std::os::raw::c_uint,
                          count: ::std::os::raw::c_uint) -> *mut String {
        _ZN6String6removeEjj(&mut *self, index, count)
    }
    #[inline]
    pub unsafe fn toLowerCase(&mut self) -> *mut String {
        _ZN6String11toLowerCaseEv(&mut *self)
    }
    #[inline]
    pub unsafe fn toUpperCase(&mut self) -> *mut String {
        _ZN6String11toUpperCaseEv(&mut *self)
    }
    #[inline]
    pub unsafe fn trim(&mut self) -> *mut String {
        _ZN6String4trimEv(&mut *self)
    }
    #[inline]
    pub unsafe fn toInt(&mut self) -> ::std::os::raw::c_long {
        _ZNK6String5toIntEv(&mut *self)
    }
    #[inline]
    pub unsafe fn toFloat(&mut self) -> f32 {
        _ZNK6String7toFloatEv(&mut *self)
    }
    #[inline]
    pub unsafe fn init(&mut self) { _ZN6String4initEv(&mut *self) }
    #[inline]
    pub unsafe fn changeBuffer(&mut self, maxStrLen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        _ZN6String12changeBufferEj(&mut *self, maxStrLen)
    }
    #[inline]
    pub unsafe fn append11(&mut self, cstr: *const ::std::os::raw::c_uchar,
                           length: ::std::os::raw::c_uint) -> *mut String {
        _ZN6String6appendEPKcj(&mut *self, cstr, length)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct StringSumHelper {
    pub _base: String,
}
#[test]
fn bindgen_test_layout_StringSumHelper() {
    assert_eq!(::std::mem::size_of::<StringSumHelper>() , 16usize);
    assert_eq!(::std::mem::align_of::<StringSumHelper>() , 4usize);
}
pub type __guard = ::std::os::raw::c_longlong;
/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Printable {
    pub _vftable: *const _vftable_Printable,
}
#[repr(C)]
pub struct _vftable_Printable {
    pub printTo: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                      p: *mut Print) -> usize,
}
impl ::std::clone::Clone for Printable {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Printable() {
    assert_eq!(::std::mem::size_of::<Printable>() , 4usize);
    assert_eq!(::std::mem::align_of::<Printable>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Print {
    pub _vftable: *const _vftable_Print,
    pub write_error: ::std::os::raw::c_uchar,
}
#[repr(C)]
pub struct _vftable_Print {
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, b: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
}
impl ::std::clone::Clone for Print {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Print() {
    assert_eq!(::std::mem::size_of::<Print>() , 8usize);
    assert_eq!(::std::mem::align_of::<Print>() , 4usize);
}
extern "C" {
    fn _ZN5Print5writeEPKc(this: *mut Print,
                           str: *const ::std::os::raw::c_uchar) -> usize;
    fn _ZN5Print5writeEPKcj(this: *mut Print,
                            buffer: *const ::std::os::raw::c_uchar,
                            size: usize) -> usize;
    fn _ZN5Print5printERK6String(this: *mut Print, s: *const String) -> usize;
    fn _ZN5Print5printEc(this: *mut Print, c: ::std::os::raw::c_uchar)
     -> usize;
    fn _ZN5Print5printEPKc(this: *mut Print,
                           s: *const ::std::os::raw::c_uchar) -> usize;
    fn _ZN5Print5printEPK19__FlashStringHelper(this: *mut Print,
                                               f: *const __FlashStringHelper)
     -> usize;
    fn _ZN5Print5printEh(this: *mut Print, b: u8) -> usize;
    fn _ZN5Print5printEi(this: *mut Print, n: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEj(this: *mut Print, n: ::std::os::raw::c_uint)
     -> usize;
    fn _ZN5Print5printEl(this: *mut Print, n: ::std::os::raw::c_long)
     -> usize;
    fn _ZN5Print5printEm(this: *mut Print, n: ::std::os::raw::c_ulong)
     -> usize;
    fn _ZN5Print5printEhi(this: *mut Print, n: ::std::os::raw::c_uchar,
                          base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEii(this: *mut Print, n: ::std::os::raw::c_int,
                          base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEji(this: *mut Print, n: ::std::os::raw::c_uint,
                          base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEli(this: *mut Print, n: ::std::os::raw::c_long,
                          base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEmi(this: *mut Print, n: ::std::os::raw::c_ulong,
                          base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printEdi(this: *mut Print, n: f64,
                          digits: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print5printERK9Printable(this: *mut Print, obj: *const Printable)
     -> usize;
    fn _ZN5Print7printlnEv(this: *mut Print) -> usize;
    fn _ZN5Print7printlnERK6String(this: *mut Print, s: *const String)
     -> usize;
    fn _ZN5Print7printlnEc(this: *mut Print, c: ::std::os::raw::c_uchar)
     -> usize;
    fn _ZN5Print7printlnEPKc(this: *mut Print,
                             s: *const ::std::os::raw::c_uchar) -> usize;
    fn _ZN5Print7printlnEPK19__FlashStringHelper(this: *mut Print,
                                                 f:
                                                     *const __FlashStringHelper)
     -> usize;
    fn _ZN5Print7printlnEh(this: *mut Print, b: u8) -> usize;
    fn _ZN5Print7printlnEi(this: *mut Print, n: ::std::os::raw::c_int)
     -> usize;
    fn _ZN5Print7printlnEj(this: *mut Print, n: ::std::os::raw::c_uint)
     -> usize;
    fn _ZN5Print7printlnEl(this: *mut Print, n: ::std::os::raw::c_long)
     -> usize;
    fn _ZN5Print7printlnEm(this: *mut Print, n: ::std::os::raw::c_ulong)
     -> usize;
    fn _ZN5Print7printlnEhi(this: *mut Print, n: ::std::os::raw::c_uchar,
                            base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnEii(this: *mut Print, n: ::std::os::raw::c_int,
                            base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnEji(this: *mut Print, n: ::std::os::raw::c_uint,
                            base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnEli(this: *mut Print, n: ::std::os::raw::c_long,
                            base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnEmi(this: *mut Print, n: ::std::os::raw::c_ulong,
                            base: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnEdi(this: *mut Print, n: f64,
                            digits: ::std::os::raw::c_int) -> usize;
    fn _ZN5Print7printlnERK9Printable(this: *mut Print, obj: *const Printable)
     -> usize;
    fn _ZN5Print13getWriteErrorEv(this: *mut Print) -> ::std::os::raw::c_int;
    fn _ZN5Print15clearWriteErrorEv(this: *mut Print);
    fn _ZN5Print6printfEPKcz(this: *mut Print,
                             format: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
    fn _ZN5Print6printfEPK19__FlashStringHelperz(this: *mut Print,
                                                 format:
                                                     *const __FlashStringHelper, ...)
     -> ::std::os::raw::c_int;
    fn _ZN5Print13setWriteErrorEi(this: *mut Print,
                                  err: ::std::os::raw::c_int);
}
impl Print {
    #[inline]
    pub unsafe fn write(&mut self, str: *const ::std::os::raw::c_uchar)
     -> usize {
        _ZN5Print5writeEPKc(&mut *self, str)
    }
    #[inline]
    pub unsafe fn write1(&mut self, buffer: *const ::std::os::raw::c_uchar,
                         size: usize) -> usize {
        _ZN5Print5writeEPKcj(&mut *self, buffer, size)
    }
    #[inline]
    pub unsafe fn print(&mut self, s: *const String) -> usize {
        _ZN5Print5printERK6String(&mut *self, s)
    }
    #[inline]
    pub unsafe fn print1(&mut self, c: ::std::os::raw::c_uchar) -> usize {
        _ZN5Print5printEc(&mut *self, c)
    }
    #[inline]
    pub unsafe fn print2(&mut self, s: *const ::std::os::raw::c_uchar)
     -> usize {
        _ZN5Print5printEPKc(&mut *self, s)
    }
    #[inline]
    pub unsafe fn print3(&mut self, f: *const __FlashStringHelper) -> usize {
        _ZN5Print5printEPK19__FlashStringHelper(&mut *self, f)
    }
    #[inline]
    pub unsafe fn print4(&mut self, b: u8) -> usize {
        _ZN5Print5printEh(&mut *self, b)
    }
    #[inline]
    pub unsafe fn print5(&mut self, n: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEi(&mut *self, n)
    }
    #[inline]
    pub unsafe fn print6(&mut self, n: ::std::os::raw::c_uint) -> usize {
        _ZN5Print5printEj(&mut *self, n)
    }
    #[inline]
    pub unsafe fn print7(&mut self, n: ::std::os::raw::c_long) -> usize {
        _ZN5Print5printEl(&mut *self, n)
    }
    #[inline]
    pub unsafe fn print8(&mut self, n: ::std::os::raw::c_ulong) -> usize {
        _ZN5Print5printEm(&mut *self, n)
    }
    #[inline]
    pub unsafe fn print9(&mut self, n: ::std::os::raw::c_uchar,
                         base: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEhi(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn print10(&mut self, n: ::std::os::raw::c_int,
                          base: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEii(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn print11(&mut self, n: ::std::os::raw::c_uint,
                          base: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEji(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn print12(&mut self, n: ::std::os::raw::c_long,
                          base: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEli(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn print13(&mut self, n: ::std::os::raw::c_ulong,
                          base: ::std::os::raw::c_int) -> usize {
        _ZN5Print5printEmi(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn print14(&mut self, n: f64, digits: ::std::os::raw::c_int)
     -> usize {
        _ZN5Print5printEdi(&mut *self, n, digits)
    }
    #[inline]
    pub unsafe fn print15(&mut self, obj: *const Printable) -> usize {
        _ZN5Print5printERK9Printable(&mut *self, obj)
    }
    #[inline]
    pub unsafe fn println(&mut self) -> usize {
        _ZN5Print7printlnEv(&mut *self)
    }
    #[inline]
    pub unsafe fn println1(&mut self, s: *const String) -> usize {
        _ZN5Print7printlnERK6String(&mut *self, s)
    }
    #[inline]
    pub unsafe fn println2(&mut self, c: ::std::os::raw::c_uchar) -> usize {
        _ZN5Print7printlnEc(&mut *self, c)
    }
    #[inline]
    pub unsafe fn println3(&mut self, s: *const ::std::os::raw::c_uchar)
     -> usize {
        _ZN5Print7printlnEPKc(&mut *self, s)
    }
    #[inline]
    pub unsafe fn println4(&mut self, f: *const __FlashStringHelper)
     -> usize {
        _ZN5Print7printlnEPK19__FlashStringHelper(&mut *self, f)
    }
    #[inline]
    pub unsafe fn println5(&mut self, b: u8) -> usize {
        _ZN5Print7printlnEh(&mut *self, b)
    }
    #[inline]
    pub unsafe fn println6(&mut self, n: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEi(&mut *self, n)
    }
    #[inline]
    pub unsafe fn println7(&mut self, n: ::std::os::raw::c_uint) -> usize {
        _ZN5Print7printlnEj(&mut *self, n)
    }
    #[inline]
    pub unsafe fn println8(&mut self, n: ::std::os::raw::c_long) -> usize {
        _ZN5Print7printlnEl(&mut *self, n)
    }
    #[inline]
    pub unsafe fn println9(&mut self, n: ::std::os::raw::c_ulong) -> usize {
        _ZN5Print7printlnEm(&mut *self, n)
    }
    #[inline]
    pub unsafe fn println10(&mut self, n: ::std::os::raw::c_uchar,
                            base: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEhi(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn println11(&mut self, n: ::std::os::raw::c_int,
                            base: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEii(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn println12(&mut self, n: ::std::os::raw::c_uint,
                            base: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEji(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn println13(&mut self, n: ::std::os::raw::c_long,
                            base: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEli(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn println14(&mut self, n: ::std::os::raw::c_ulong,
                            base: ::std::os::raw::c_int) -> usize {
        _ZN5Print7printlnEmi(&mut *self, n, base)
    }
    #[inline]
    pub unsafe fn println15(&mut self, n: f64, digits: ::std::os::raw::c_int)
     -> usize {
        _ZN5Print7printlnEdi(&mut *self, n, digits)
    }
    #[inline]
    pub unsafe fn println16(&mut self, obj: *const Printable) -> usize {
        _ZN5Print7printlnERK9Printable(&mut *self, obj)
    }
    #[inline]
    pub unsafe fn getWriteError(&mut self) -> ::std::os::raw::c_int {
        _ZN5Print13getWriteErrorEv(&mut *self)
    }
    #[inline]
    pub unsafe fn clearWriteError(&mut self) {
        _ZN5Print15clearWriteErrorEv(&mut *self)
    }
    #[inline]
    pub unsafe fn printf(&mut self, format: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        _ZN5Print6printfEPKcz(&mut *self, format)
    }
    #[inline]
    pub unsafe fn printf1(&mut self, format: *const __FlashStringHelper)
     -> ::std::os::raw::c_int {
        _ZN5Print6printfEPK19__FlashStringHelperz(&mut *self, format)
    }
    #[inline]
    pub unsafe fn setWriteError(&mut self, err: ::std::os::raw::c_int) {
        _ZN5Print13setWriteErrorEi(&mut *self, err)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Stream {
    pub _base: Print,
    pub _timeout: ::std::os::raw::c_ulong,
    pub read_error: ::std::os::raw::c_uchar,
}
#[repr(C)]
pub struct _vftable_Stream {
    pub _base: _vftable_Print,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
}
impl ::std::clone::Clone for Stream {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Stream() {
    assert_eq!(::std::mem::size_of::<Stream>() , 16usize);
    assert_eq!(::std::mem::align_of::<Stream>() , 4usize);
}
extern "C" {
    fn _ZN6Stream10setTimeoutEm(this: *mut Stream,
                                timeout: ::std::os::raw::c_ulong);
    fn _ZN6Stream4findEPc(this: *mut Stream,
                          target: *mut ::std::os::raw::c_uchar) -> bool;
    fn _ZN6Stream4findEPh(this: *mut Stream, target: *mut u8) -> bool;
    fn _ZN6Stream4findEPcj(this: *mut Stream,
                           target: *mut ::std::os::raw::c_uchar,
                           length: usize) -> bool;
    fn _ZN6Stream4findEPhj(this: *mut Stream, target: *mut u8, length: usize)
     -> bool;
    fn _ZN6Stream9findUntilEPcS0_(this: *mut Stream,
                                  target: *mut ::std::os::raw::c_uchar,
                                  terminator: *mut ::std::os::raw::c_uchar)
     -> bool;
    fn _ZN6Stream9findUntilEPhPc(this: *mut Stream, target: *mut u8,
                                 terminator: *mut ::std::os::raw::c_uchar)
     -> bool;
    fn _ZN6Stream9findUntilEPcjS0_j(this: *mut Stream,
                                    target: *mut ::std::os::raw::c_uchar,
                                    targetLen: usize,
                                    terminate: *mut ::std::os::raw::c_uchar,
                                    termLen: usize) -> bool;
    fn _ZN6Stream9findUntilEPhjPcj(this: *mut Stream, target: *mut u8,
                                   targetLen: usize,
                                   terminate: *mut ::std::os::raw::c_uchar,
                                   termLen: usize) -> bool;
    fn _ZN6Stream8parseIntEv(this: *mut Stream) -> ::std::os::raw::c_long;
    fn _ZN6Stream8parseIntEc(this: *mut Stream,
                             skipChar: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long;
    fn _ZN6Stream10parseFloatEv(this: *mut Stream) -> f32;
    fn _ZN6Stream10parseFloatEc(this: *mut Stream,
                                skipChar: ::std::os::raw::c_uchar) -> f32;
    fn _ZN6Stream9readBytesEPcj(this: *mut Stream,
                                buffer: *mut ::std::os::raw::c_uchar,
                                length: usize) -> usize;
    fn _ZN6Stream9readBytesEPhj(this: *mut Stream, buffer: *mut u8,
                                length: usize) -> usize;
    fn _ZN6Stream14readBytesUntilEcPcj(this: *mut Stream,
                                       terminator: ::std::os::raw::c_uchar,
                                       buffer: *mut ::std::os::raw::c_uchar,
                                       length: usize) -> usize;
    fn _ZN6Stream14readBytesUntilEcPhj(this: *mut Stream,
                                       terminator: ::std::os::raw::c_uchar,
                                       buffer: *mut u8, length: usize)
     -> usize;
    fn _ZN6Stream10readStringEj(this: *mut Stream, max: usize) -> String;
    fn _ZN6Stream15readStringUntilEcj(this: *mut Stream,
                                      terminator: ::std::os::raw::c_uchar,
                                      max: usize) -> String;
    fn _ZN6Stream12getReadErrorEv(this: *mut Stream) -> ::std::os::raw::c_int;
    fn _ZN6Stream14clearReadErrorEv(this: *mut Stream);
    fn _ZN6Stream12setReadErrorEi(this: *mut Stream,
                                  err: ::std::os::raw::c_int);
}
impl Stream {
    #[inline]
    pub unsafe fn setTimeout(&mut self, timeout: ::std::os::raw::c_ulong) {
        _ZN6Stream10setTimeoutEm(&mut *self, timeout)
    }
    #[inline]
    pub unsafe fn find(&mut self, target: *mut ::std::os::raw::c_uchar)
     -> bool {
        _ZN6Stream4findEPc(&mut *self, target)
    }
    #[inline]
    pub unsafe fn find1(&mut self, target: *mut u8) -> bool {
        _ZN6Stream4findEPh(&mut *self, target)
    }
    #[inline]
    pub unsafe fn find2(&mut self, target: *mut ::std::os::raw::c_uchar,
                        length: usize) -> bool {
        _ZN6Stream4findEPcj(&mut *self, target, length)
    }
    #[inline]
    pub unsafe fn find3(&mut self, target: *mut u8, length: usize) -> bool {
        _ZN6Stream4findEPhj(&mut *self, target, length)
    }
    #[inline]
    pub unsafe fn findUntil(&mut self, target: *mut ::std::os::raw::c_uchar,
                            terminator: *mut ::std::os::raw::c_uchar)
     -> bool {
        _ZN6Stream9findUntilEPcS0_(&mut *self, target, terminator)
    }
    #[inline]
    pub unsafe fn findUntil1(&mut self, target: *mut u8,
                             terminator: *mut ::std::os::raw::c_uchar)
     -> bool {
        _ZN6Stream9findUntilEPhPc(&mut *self, target, terminator)
    }
    #[inline]
    pub unsafe fn findUntil2(&mut self, target: *mut ::std::os::raw::c_uchar,
                             targetLen: usize,
                             terminate: *mut ::std::os::raw::c_uchar,
                             termLen: usize) -> bool {
        _ZN6Stream9findUntilEPcjS0_j(&mut *self, target, targetLen, terminate,
                                     termLen)
    }
    #[inline]
    pub unsafe fn findUntil3(&mut self, target: *mut u8, targetLen: usize,
                             terminate: *mut ::std::os::raw::c_uchar,
                             termLen: usize) -> bool {
        _ZN6Stream9findUntilEPhjPcj(&mut *self, target, targetLen, terminate,
                                    termLen)
    }
    #[inline]
    pub unsafe fn parseInt(&mut self) -> ::std::os::raw::c_long {
        _ZN6Stream8parseIntEv(&mut *self)
    }
    #[inline]
    pub unsafe fn parseInt1(&mut self, skipChar: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long {
        _ZN6Stream8parseIntEc(&mut *self, skipChar)
    }
    #[inline]
    pub unsafe fn parseFloat(&mut self) -> f32 {
        _ZN6Stream10parseFloatEv(&mut *self)
    }
    #[inline]
    pub unsafe fn parseFloat1(&mut self, skipChar: ::std::os::raw::c_uchar)
     -> f32 {
        _ZN6Stream10parseFloatEc(&mut *self, skipChar)
    }
    #[inline]
    pub unsafe fn readBytes(&mut self, buffer: *mut ::std::os::raw::c_uchar,
                            length: usize) -> usize {
        _ZN6Stream9readBytesEPcj(&mut *self, buffer, length)
    }
    #[inline]
    pub unsafe fn readBytes1(&mut self, buffer: *mut u8, length: usize)
     -> usize {
        _ZN6Stream9readBytesEPhj(&mut *self, buffer, length)
    }
    #[inline]
    pub unsafe fn readBytesUntil(&mut self,
                                 terminator: ::std::os::raw::c_uchar,
                                 buffer: *mut ::std::os::raw::c_uchar,
                                 length: usize) -> usize {
        _ZN6Stream14readBytesUntilEcPcj(&mut *self, terminator, buffer,
                                        length)
    }
    #[inline]
    pub unsafe fn readBytesUntil1(&mut self,
                                  terminator: ::std::os::raw::c_uchar,
                                  buffer: *mut u8, length: usize) -> usize {
        _ZN6Stream14readBytesUntilEcPhj(&mut *self, terminator, buffer,
                                        length)
    }
    #[inline]
    pub unsafe fn readString(&mut self, max: usize) -> String {
        _ZN6Stream10readStringEj(&mut *self, max)
    }
    #[inline]
    pub unsafe fn readStringUntil(&mut self,
                                  terminator: ::std::os::raw::c_uchar,
                                  max: usize) -> String {
        _ZN6Stream15readStringUntilEcj(&mut *self, terminator, max)
    }
    #[inline]
    pub unsafe fn getReadError(&mut self) -> ::std::os::raw::c_int {
        _ZN6Stream12getReadErrorEv(&mut *self)
    }
    #[inline]
    pub unsafe fn clearReadError(&mut self) {
        _ZN6Stream14clearReadErrorEv(&mut *self)
    }
    #[inline]
    pub unsafe fn setReadError(&mut self, err: ::std::os::raw::c_int) {
        _ZN6Stream12setReadErrorEi(&mut *self, err)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial {
    pub _base: Stream,
}
#[repr(C)]
pub struct _vftable_HardwareSerial {
    pub _base: _vftable_Stream,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial() {
    assert_eq!(::std::mem::size_of::<HardwareSerial>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial2 {
    pub _base: HardwareSerial,
}
#[repr(C)]
pub struct _vftable_HardwareSerial2 {
    pub _base: _vftable_HardwareSerial,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial2() {
    assert_eq!(::std::mem::size_of::<HardwareSerial2>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial2>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial3 {
    pub _base: HardwareSerial,
}
#[repr(C)]
pub struct _vftable_HardwareSerial3 {
    pub _base: _vftable_HardwareSerial,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial3 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial3() {
    assert_eq!(::std::mem::size_of::<HardwareSerial3>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial3>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial4 {
    pub _base: HardwareSerial,
}
#[repr(C)]
pub struct _vftable_HardwareSerial4 {
    pub _base: _vftable_HardwareSerial,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial4 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial4() {
    assert_eq!(::std::mem::size_of::<HardwareSerial4>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial4>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial5 {
    pub _base: HardwareSerial,
}
#[repr(C)]
pub struct _vftable_HardwareSerial5 {
    pub _base: _vftable_HardwareSerial,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial5 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial5() {
    assert_eq!(::std::mem::size_of::<HardwareSerial5>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial5>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial6 {
    pub _base: HardwareSerial,
}
#[repr(C)]
pub struct _vftable_HardwareSerial6 {
    pub _base: _vftable_HardwareSerial,
    pub begin: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    baud: u32),
    pub begin1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     baud: u32, format: u32),
    pub end: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub transmitterEnable: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void,
                                                pin: u8),
    pub setRX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8),
    pub setTX: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    pin: u8, opendrain: bool),
    pub attachRts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub attachCts: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        pin: u8) -> bool,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub availableForWrite: unsafe extern "C" fn(this:
                                                    *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_ulong) -> usize,
    pub write2: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_long) -> usize,
    pub write3: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_uint) -> usize,
    pub write4: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     n: ::std::os::raw::c_int) -> usize,
    pub write5: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
    pub write6: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     str: *const ::std::os::raw::c_uchar)
                    -> usize,
    pub write9bit: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                        c: u32) -> usize,
}
impl ::std::clone::Clone for HardwareSerial6 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_HardwareSerial6() {
    assert_eq!(::std::mem::size_of::<HardwareSerial6>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial6>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTDemulation;
impl ::std::clone::Clone for PORTDemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINDemulation;
impl ::std::clone::Clone for PINDemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRDemulation;
impl ::std::clone::Clone for DDRDemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTBemulation;
impl ::std::clone::Clone for PORTBemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINBemulation;
impl ::std::clone::Clone for PINBemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRBemulation;
impl ::std::clone::Clone for DDRBemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTCemulation;
impl ::std::clone::Clone for PORTCemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINCemulation;
impl ::std::clone::Clone for PINCemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRCemulation;
impl ::std::clone::Clone for DDRCemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPCRemulation;
impl ::std::clone::Clone for SPCRemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    fn _ZN13SPCRemulation7setMOSIEh(this: *mut SPCRemulation, pin: u8);
    fn _ZN13SPCRemulation7setMISOEh(this: *mut SPCRemulation, pin: u8);
    fn _ZN13SPCRemulation6setSCKEh(this: *mut SPCRemulation, pin: u8);
    fn _ZN13SPCRemulation11enable_pinsEv(this: *mut SPCRemulation);
    fn _ZN13SPCRemulation12disable_pinsEv(this: *mut SPCRemulation);
}
impl SPCRemulation {
    #[inline]
    pub unsafe fn setMOSI(&mut self, pin: u8) {
        _ZN13SPCRemulation7setMOSIEh(&mut *self, pin)
    }
    #[inline]
    pub unsafe fn setMISO(&mut self, pin: u8) {
        _ZN13SPCRemulation7setMISOEh(&mut *self, pin)
    }
    #[inline]
    pub unsafe fn setSCK(&mut self, pin: u8) {
        _ZN13SPCRemulation6setSCKEh(&mut *self, pin)
    }
    #[inline]
    pub unsafe fn enable_pins(&mut self) {
        _ZN13SPCRemulation11enable_pinsEv(&mut *self)
    }
    #[inline]
    pub unsafe fn disable_pins(&mut self) {
        _ZN13SPCRemulation12disable_pinsEv(&mut *self)
    }
}
extern "C" {
    #[link_name = "_ZN13SPCRemulation6pinoutE"]
    pub static mut SPCRemulation_consts_pinout: ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPSRemulation;
impl ::std::clone::Clone for SPSRemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPDRemulation;
impl ::std::clone::Clone for SPDRemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SREGemulation;
impl ::std::clone::Clone for SREGemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct EIMSKemulation;
impl ::std::clone::Clone for EIMSKemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct usb_serial_class {
    pub _base: Stream,
}
#[repr(C)]
pub struct _vftable_usb_serial_class {
    pub _base: _vftable_Stream,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub clear: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void, c: u8)
                   -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     buffer: *const u8, size: usize) -> usize,
}
impl ::std::clone::Clone for usb_serial_class {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_usb_serial_class() {
    assert_eq!(::std::mem::size_of::<usb_serial_class>() , 16usize);
    assert_eq!(::std::mem::align_of::<usb_serial_class>() , 4usize);
}
extern "C" {
    fn _ZN16usb_serial_class5beginEl(this: *mut usb_serial_class,
                                     arg1: ::std::os::raw::c_long);
    fn _ZN16usb_serial_class3endEv(this: *mut usb_serial_class);
    fn _ZN16usb_serial_class5writeEm(this: *mut usb_serial_class,
                                     n: ::std::os::raw::c_ulong) -> usize;
    fn _ZN16usb_serial_class5writeEl(this: *mut usb_serial_class,
                                     n: ::std::os::raw::c_long) -> usize;
    fn _ZN16usb_serial_class5writeEj(this: *mut usb_serial_class,
                                     n: ::std::os::raw::c_uint) -> usize;
    fn _ZN16usb_serial_class5writeEi(this: *mut usb_serial_class,
                                     n: ::std::os::raw::c_int) -> usize;
    fn _ZN16usb_serial_class17availableForWriteEv(this: *mut usb_serial_class)
     -> ::std::os::raw::c_int;
    fn _ZN16usb_serial_class8send_nowEv(this: *mut usb_serial_class);
    fn _ZN16usb_serial_class4baudEv(this: *mut usb_serial_class) -> u32;
    fn _ZN16usb_serial_class8stopbitsEv(this: *mut usb_serial_class) -> u8;
    fn _ZN16usb_serial_class10paritytypeEv(this: *mut usb_serial_class) -> u8;
    fn _ZN16usb_serial_class7numbitsEv(this: *mut usb_serial_class) -> u8;
    fn _ZN16usb_serial_class3dtrEv(this: *mut usb_serial_class) -> u8;
    fn _ZN16usb_serial_class3rtsEv(this: *mut usb_serial_class) -> u8;
    fn _ZN16usb_serial_class9readBytesEPcj(this: *mut usb_serial_class,
                                           buffer:
                                               *mut ::std::os::raw::c_uchar,
                                           length: usize) -> usize;
}
impl usb_serial_class {
    #[inline]
    pub unsafe fn begin(&mut self, arg1: ::std::os::raw::c_long) {
        _ZN16usb_serial_class5beginEl(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn end(&mut self) { _ZN16usb_serial_class3endEv(&mut *self) }
    #[inline]
    pub unsafe fn write(&mut self, n: ::std::os::raw::c_ulong) -> usize {
        _ZN16usb_serial_class5writeEm(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write1(&mut self, n: ::std::os::raw::c_long) -> usize {
        _ZN16usb_serial_class5writeEl(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write2(&mut self, n: ::std::os::raw::c_uint) -> usize {
        _ZN16usb_serial_class5writeEj(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write3(&mut self, n: ::std::os::raw::c_int) -> usize {
        _ZN16usb_serial_class5writeEi(&mut *self, n)
    }
    #[inline]
    pub unsafe fn availableForWrite(&mut self) -> ::std::os::raw::c_int {
        _ZN16usb_serial_class17availableForWriteEv(&mut *self)
    }
    #[inline]
    pub unsafe fn send_now(&mut self) {
        _ZN16usb_serial_class8send_nowEv(&mut *self)
    }
    #[inline]
    pub unsafe fn baud(&mut self) -> u32 {
        _ZN16usb_serial_class4baudEv(&mut *self)
    }
    #[inline]
    pub unsafe fn stopbits(&mut self) -> u8 {
        _ZN16usb_serial_class8stopbitsEv(&mut *self)
    }
    #[inline]
    pub unsafe fn paritytype(&mut self) -> u8 {
        _ZN16usb_serial_class10paritytypeEv(&mut *self)
    }
    #[inline]
    pub unsafe fn numbits(&mut self) -> u8 {
        _ZN16usb_serial_class7numbitsEv(&mut *self)
    }
    #[inline]
    pub unsafe fn dtr(&mut self) -> u8 {
        _ZN16usb_serial_class3dtrEv(&mut *self)
    }
    #[inline]
    pub unsafe fn rts(&mut self) -> u8 {
        _ZN16usb_serial_class3rtsEv(&mut *self)
    }
    #[inline]
    pub unsafe fn readBytes(&mut self, buffer: *mut ::std::os::raw::c_uchar,
                            length: usize) -> usize {
        _ZN16usb_serial_class9readBytesEPcj(&mut *self, buffer, length)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct elapsedMillis {
    pub ms: ::std::os::raw::c_ulong,
}
impl ::std::clone::Clone for elapsedMillis {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_elapsedMillis() {
    assert_eq!(::std::mem::size_of::<elapsedMillis>() , 4usize);
    assert_eq!(::std::mem::align_of::<elapsedMillis>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct elapsedMicros {
    pub us: ::std::os::raw::c_ulong,
}
impl ::std::clone::Clone for elapsedMicros {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_elapsedMicros() {
    assert_eq!(::std::mem::size_of::<elapsedMicros>() , 4usize);
    assert_eq!(::std::mem::align_of::<elapsedMicros>() , 4usize);
}
#[repr(C)]
#[derive(Debug)]
pub struct IntervalTimer {
    pub status: bool,
    pub PIT_id: u8,
    pub PIT_LDVAL: *mut ::std::os::raw::c_uint,
    pub PIT_TCTRL: *mut ::std::os::raw::c_uint,
    pub IRQ_PIT_CH: u8,
    pub nvic_priority: u8,
    pub myISR: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub enum IntervalTimer_IntervalTimer_h_unnamed_7 {
    TIMER_OFF = 0,
    TIMER_PIT = 1,
}
#[test]
fn bindgen_test_layout_IntervalTimer() {
    assert_eq!(::std::mem::size_of::<IntervalTimer>() , 20usize);
    assert_eq!(::std::mem::align_of::<IntervalTimer>() , 4usize);
}
extern "C" {
    fn _ZN13IntervalTimer5beginEPFvvEj(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: ::std::os::raw::c_uint)
     -> bool;
    fn _ZN13IntervalTimer5beginEPFvvEi(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: ::std::os::raw::c_int)
     -> bool;
    fn _ZN13IntervalTimer5beginEPFvvEm(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: ::std::os::raw::c_ulong)
     -> bool;
    fn _ZN13IntervalTimer5beginEPFvvEl(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: ::std::os::raw::c_long)
     -> bool;
    fn _ZN13IntervalTimer5beginEPFvvEf(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: f32) -> bool;
    fn _ZN13IntervalTimer5beginEPFvvEd(this: *mut IntervalTimer,
                                       newISR:
                                           ::std::option::Option<unsafe extern "C" fn()>,
                                       newPeriod: f64) -> bool;
    fn _ZN13IntervalTimer3endEv(this: *mut IntervalTimer);
    fn _ZN13IntervalTimer8priorityEh(this: *mut IntervalTimer, n: u8);
}
impl IntervalTimer {
    #[inline]
    pub unsafe fn begin(&mut self,
                        newISR: ::std::option::Option<unsafe extern "C" fn()>,
                        newPeriod: ::std::os::raw::c_uint) -> bool {
        _ZN13IntervalTimer5beginEPFvvEj(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn begin1(&mut self,
                         newISR:
                             ::std::option::Option<unsafe extern "C" fn()>,
                         newPeriod: ::std::os::raw::c_int) -> bool {
        _ZN13IntervalTimer5beginEPFvvEi(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn begin2(&mut self,
                         newISR:
                             ::std::option::Option<unsafe extern "C" fn()>,
                         newPeriod: ::std::os::raw::c_ulong) -> bool {
        _ZN13IntervalTimer5beginEPFvvEm(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn begin3(&mut self,
                         newISR:
                             ::std::option::Option<unsafe extern "C" fn()>,
                         newPeriod: ::std::os::raw::c_long) -> bool {
        _ZN13IntervalTimer5beginEPFvvEl(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn begin4(&mut self,
                         newISR:
                             ::std::option::Option<unsafe extern "C" fn()>,
                         newPeriod: f32) -> bool {
        _ZN13IntervalTimer5beginEPFvvEf(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn begin5(&mut self,
                         newISR:
                             ::std::option::Option<unsafe extern "C" fn()>,
                         newPeriod: f64) -> bool {
        _ZN13IntervalTimer5beginEPFvvEd(&mut *self, newISR, newPeriod)
    }
    #[inline]
    pub unsafe fn end(&mut self) { _ZN13IntervalTimer3endEv(&mut *self) }
    #[inline]
    pub unsafe fn priority(&mut self, n: u8) {
        _ZN13IntervalTimer8priorityEh(&mut *self, n)
    }
}
extern "C" {
    #[link_name = "_ZN13IntervalTimer7NUM_PITE"]
    pub static IntervalTimer_consts_NUM_PIT: ::std::os::raw::c_uchar;
    #[link_name = "_ZN13IntervalTimer10MAX_PERIODE"]
    pub static IntervalTimer_consts_MAX_PERIOD: ::std::os::raw::c_uint;
    #[link_name = "_ZN13IntervalTimer11PIT_enabledE"]
    pub static mut IntervalTimer_consts_PIT_enabled: bool;
    #[link_name = "_ZN13IntervalTimer8PIT_usedE"]
    pub static mut IntervalTimer_consts_PIT_used: [bool; 4usize];
    #[link_name = "_ZN13IntervalTimer7PIT_ISRE"]
    pub static mut IntervalTimer_consts_PIT_ISR:
               [::std::option::Option<unsafe extern "C" fn()>; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPISettings {
    pub ctar: u32,
}
impl ::std::clone::Clone for SPISettings {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_SPISettings() {
    assert_eq!(::std::mem::size_of::<SPISettings>() , 4usize);
    assert_eq!(::std::mem::align_of::<SPISettings>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN11SPISettings14ctar_div_tableE"]
    pub static mut SPISettings_consts_ctar_div_table:
               [::std::os::raw::c_ushort; 23usize];
    #[link_name = "_ZN11SPISettings16ctar_clock_tableE"]
    pub static mut SPISettings_consts_ctar_clock_table:
               [::std::os::raw::c_uint; 23usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPIClass;
impl ::std::clone::Clone for SPIClass {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    fn _ZN8SPIClass5beginEv();
    fn _ZN8SPIClass14usingInterruptEh(n: u8);
    fn _ZN8SPIClass14usingInterruptE12IRQ_NUMBER_t(interruptName:
                                                       IRQ_NUMBER_t);
    fn _ZN8SPIClass17notUsingInterruptE12IRQ_NUMBER_t(interruptName:
                                                          IRQ_NUMBER_t);
    fn _ZN8SPIClass16beginTransactionE11SPISettings(settings: SPISettings);
    fn _ZN8SPIClass8transferEh(data: u8) -> u8;
    fn _ZN8SPIClass10transfer16Et(data: u16) -> u16;
    fn _ZN8SPIClass8transferEPvj(buf: *mut ::std::os::raw::c_void,
                                 count: usize);
    fn _ZN8SPIClass14endTransactionEv();
    fn _ZN8SPIClass3endEv();
    fn _ZN8SPIClass11setBitOrderEh(bitOrder: u8);
    fn _ZN8SPIClass11setDataModeEh(dataMode: u8);
    fn _ZN8SPIClass15setClockDividerEh(clockDiv: u8);
    fn _ZN8SPIClass24setClockDivider_noInlineEj(clk: u32);
    fn _ZN8SPIClass15attachInterruptEv();
    fn _ZN8SPIClass15detachInterruptEv();
    fn _ZN8SPIClass7setMOSIEh(pin: u8);
    fn _ZN8SPIClass7setMISOEh(pin: u8);
    fn _ZN8SPIClass6setSCKEh(pin: u8);
    fn _ZN8SPIClass15pinIsChipSelectEh(pin: u8) -> u8;
    fn _ZN8SPIClass15pinIsChipSelectEhh(pin1: u8, pin2: u8) -> bool;
    fn _ZN8SPIClass5setCSEh(pin: u8) -> u8;
}
impl SPIClass {
    #[inline]
    pub unsafe fn begin() { _ZN8SPIClass5beginEv() }
    #[inline]
    pub unsafe fn usingInterrupt(n: u8) { _ZN8SPIClass14usingInterruptEh(n) }
    #[inline]
    pub unsafe fn usingInterrupt1(interruptName: IRQ_NUMBER_t) {
        _ZN8SPIClass14usingInterruptE12IRQ_NUMBER_t(interruptName)
    }
    #[inline]
    pub unsafe fn notUsingInterrupt(interruptName: IRQ_NUMBER_t) {
        _ZN8SPIClass17notUsingInterruptE12IRQ_NUMBER_t(interruptName)
    }
    #[inline]
    pub unsafe fn beginTransaction(settings: SPISettings) {
        _ZN8SPIClass16beginTransactionE11SPISettings(settings)
    }
    #[inline]
    pub unsafe fn transfer(data: u8) -> u8 { _ZN8SPIClass8transferEh(data) }
    #[inline]
    pub unsafe fn transfer16(data: u16) -> u16 {
        _ZN8SPIClass10transfer16Et(data)
    }
    #[inline]
    pub unsafe fn transfer1(buf: *mut ::std::os::raw::c_void, count: usize) {
        _ZN8SPIClass8transferEPvj(buf, count)
    }
    #[inline]
    pub unsafe fn endTransaction() { _ZN8SPIClass14endTransactionEv() }
    #[inline]
    pub unsafe fn end() { _ZN8SPIClass3endEv() }
    #[inline]
    pub unsafe fn setBitOrder(bitOrder: u8) {
        _ZN8SPIClass11setBitOrderEh(bitOrder)
    }
    #[inline]
    pub unsafe fn setDataMode(dataMode: u8) {
        _ZN8SPIClass11setDataModeEh(dataMode)
    }
    #[inline]
    pub unsafe fn setClockDivider(clockDiv: u8) {
        _ZN8SPIClass15setClockDividerEh(clockDiv)
    }
    #[inline]
    pub unsafe fn setClockDivider_noInline(clk: u32) {
        _ZN8SPIClass24setClockDivider_noInlineEj(clk)
    }
    #[inline]
    pub unsafe fn attachInterrupt() { _ZN8SPIClass15attachInterruptEv() }
    #[inline]
    pub unsafe fn detachInterrupt() { _ZN8SPIClass15detachInterruptEv() }
    #[inline]
    pub unsafe fn setMOSI(pin: u8) { _ZN8SPIClass7setMOSIEh(pin) }
    #[inline]
    pub unsafe fn setMISO(pin: u8) { _ZN8SPIClass7setMISOEh(pin) }
    #[inline]
    pub unsafe fn setSCK(pin: u8) { _ZN8SPIClass6setSCKEh(pin) }
    #[inline]
    pub unsafe fn pinIsChipSelect(pin: u8) -> u8 {
        _ZN8SPIClass15pinIsChipSelectEh(pin)
    }
    #[inline]
    pub unsafe fn pinIsChipSelect1(pin1: u8, pin2: u8) -> bool {
        _ZN8SPIClass15pinIsChipSelectEhh(pin1, pin2)
    }
    #[inline]
    pub unsafe fn setCS(pin: u8) -> u8 { _ZN8SPIClass5setCSEh(pin) }
}
extern "C" {
    #[link_name = "_ZN8SPIClass18interruptMasksUsedE"]
    pub static mut SPIClass_consts_interruptMasksUsed:
               ::std::os::raw::c_uchar;
    #[link_name = "_ZN8SPIClass13interruptMaskE"]
    pub static mut SPIClass_consts_interruptMask:
               [::std::os::raw::c_uint; 3usize];
    #[link_name = "_ZN8SPIClass13interruptSaveE"]
    pub static mut SPIClass_consts_interruptSave:
               [::std::os::raw::c_uint; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TwoWire {
    pub _base: Stream,
}
#[repr(C)]
pub struct _vftable_TwoWire {
    pub _base: _vftable_Stream,
    pub write: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                    arg1: u8) -> usize,
    pub write1: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void,
                                     arg1: *const u8, arg2: usize) -> usize,
    pub available: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                       -> ::std::os::raw::c_int,
    pub read: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub peek: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void)
                  -> ::std::os::raw::c_int,
    pub flush: unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
}
impl ::std::clone::Clone for TwoWire {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_TwoWire() {
    assert_eq!(::std::mem::size_of::<TwoWire>() , 16usize);
    assert_eq!(::std::mem::align_of::<TwoWire>() , 4usize);
}
extern "C" {
    fn _ZN7TwoWire5beginEv(this: *mut TwoWire);
    fn _ZN7TwoWire5beginEh(this: *mut TwoWire, arg1: u8);
    fn _ZN7TwoWire5beginEi(this: *mut TwoWire, arg1: ::std::os::raw::c_int);
    fn _ZN7TwoWire3endEv(this: *mut TwoWire);
    fn _ZN7TwoWire8setClockEj(this: *mut TwoWire, arg1: u32);
    fn _ZN7TwoWire6setSDAEh(this: *mut TwoWire, arg1: u8);
    fn _ZN7TwoWire6setSCLEh(this: *mut TwoWire, arg1: u8);
    fn _ZN7TwoWire17beginTransmissionEh(this: *mut TwoWire, arg1: u8);
    fn _ZN7TwoWire17beginTransmissionEi(this: *mut TwoWire,
                                        arg1: ::std::os::raw::c_int);
    fn _ZN7TwoWire15endTransmissionEv(this: *mut TwoWire) -> u8;
    fn _ZN7TwoWire15endTransmissionEh(this: *mut TwoWire, arg1: u8) -> u8;
    fn _ZN7TwoWire11requestFromEhh(this: *mut TwoWire, arg1: u8, arg2: u8)
     -> u8;
    fn _ZN7TwoWire11requestFromEhhh(this: *mut TwoWire, arg1: u8, arg2: u8,
                                    arg3: u8) -> u8;
    fn _ZN7TwoWire11requestFromEii(this: *mut TwoWire,
                                   arg1: ::std::os::raw::c_int,
                                   arg2: ::std::os::raw::c_int) -> u8;
    fn _ZN7TwoWire11requestFromEiii(this: *mut TwoWire,
                                    arg1: ::std::os::raw::c_int,
                                    arg2: ::std::os::raw::c_int,
                                    arg3: ::std::os::raw::c_int) -> u8;
    fn _ZN7TwoWire9onReceiveEPFviE(this: *mut TwoWire,
                                   arg1:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      ::std::os::raw::c_int)>);
    fn _ZN7TwoWire9onRequestEPFvvE(this: *mut TwoWire,
                                   arg1:
                                       ::std::option::Option<unsafe extern "C" fn()>);
    fn _ZN7TwoWire4sendEh(this: *mut TwoWire, b: u8);
    fn _ZN7TwoWire4sendEPhh(this: *mut TwoWire, s: *mut u8, n: u8);
    fn _ZN7TwoWire4sendEi(this: *mut TwoWire, n: ::std::os::raw::c_int);
    fn _ZN7TwoWire4sendEPc(this: *mut TwoWire,
                           s: *mut ::std::os::raw::c_uchar);
    fn _ZN7TwoWire7receiveEv(this: *mut TwoWire) -> u8;
    fn _ZN7TwoWire5writeEm(this: *mut TwoWire, n: ::std::os::raw::c_ulong)
     -> usize;
    fn _ZN7TwoWire5writeEl(this: *mut TwoWire, n: ::std::os::raw::c_long)
     -> usize;
    fn _ZN7TwoWire5writeEj(this: *mut TwoWire, n: ::std::os::raw::c_uint)
     -> usize;
    fn _ZN7TwoWire5writeEi(this: *mut TwoWire, n: ::std::os::raw::c_int)
     -> usize;
}
impl TwoWire {
    #[inline]
    pub unsafe fn begin(&mut self) { _ZN7TwoWire5beginEv(&mut *self) }
    #[inline]
    pub unsafe fn begin1(&mut self, arg1: u8) {
        _ZN7TwoWire5beginEh(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn begin2(&mut self, arg1: ::std::os::raw::c_int) {
        _ZN7TwoWire5beginEi(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn end(&mut self) { _ZN7TwoWire3endEv(&mut *self) }
    #[inline]
    pub unsafe fn setClock(&mut self, arg1: u32) {
        _ZN7TwoWire8setClockEj(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn setSDA(&mut self, arg1: u8) {
        _ZN7TwoWire6setSDAEh(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn setSCL(&mut self, arg1: u8) {
        _ZN7TwoWire6setSCLEh(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn beginTransmission(&mut self, arg1: u8) {
        _ZN7TwoWire17beginTransmissionEh(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn beginTransmission1(&mut self, arg1: ::std::os::raw::c_int) {
        _ZN7TwoWire17beginTransmissionEi(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn endTransmission(&mut self) -> u8 {
        _ZN7TwoWire15endTransmissionEv(&mut *self)
    }
    #[inline]
    pub unsafe fn endTransmission1(&mut self, arg1: u8) -> u8 {
        _ZN7TwoWire15endTransmissionEh(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn requestFrom(&mut self, arg1: u8, arg2: u8) -> u8 {
        _ZN7TwoWire11requestFromEhh(&mut *self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom1(&mut self, arg1: u8, arg2: u8, arg3: u8)
     -> u8 {
        _ZN7TwoWire11requestFromEhhh(&mut *self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn requestFrom2(&mut self, arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int) -> u8 {
        _ZN7TwoWire11requestFromEii(&mut *self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom3(&mut self, arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int,
                               arg3: ::std::os::raw::c_int) -> u8 {
        _ZN7TwoWire11requestFromEiii(&mut *self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn onReceive(&mut self,
                            arg1:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               ::std::os::raw::c_int)>) {
        _ZN7TwoWire9onReceiveEPFviE(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn onRequest(&mut self,
                            arg1:
                                ::std::option::Option<unsafe extern "C" fn()>) {
        _ZN7TwoWire9onRequestEPFvvE(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn send(&mut self, b: u8) { _ZN7TwoWire4sendEh(&mut *self, b) }
    #[inline]
    pub unsafe fn send1(&mut self, s: *mut u8, n: u8) {
        _ZN7TwoWire4sendEPhh(&mut *self, s, n)
    }
    #[inline]
    pub unsafe fn send2(&mut self, n: ::std::os::raw::c_int) {
        _ZN7TwoWire4sendEi(&mut *self, n)
    }
    #[inline]
    pub unsafe fn send3(&mut self, s: *mut ::std::os::raw::c_uchar) {
        _ZN7TwoWire4sendEPc(&mut *self, s)
    }
    #[inline]
    pub unsafe fn receive(&mut self) -> u8 {
        _ZN7TwoWire7receiveEv(&mut *self)
    }
    #[inline]
    pub unsafe fn write(&mut self, n: ::std::os::raw::c_ulong) -> usize {
        _ZN7TwoWire5writeEm(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write1(&mut self, n: ::std::os::raw::c_long) -> usize {
        _ZN7TwoWire5writeEl(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write2(&mut self, n: ::std::os::raw::c_uint) -> usize {
        _ZN7TwoWire5writeEj(&mut *self, n)
    }
    #[inline]
    pub unsafe fn write3(&mut self, n: ::std::os::raw::c_int) -> usize {
        _ZN7TwoWire5writeEi(&mut *self, n)
    }
}
extern "C" {
    #[link_name = "_ZN7TwoWire8rxBufferE"]
    pub static mut TwoWire_consts_rxBuffer: *mut ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire13rxBufferIndexE"]
    pub static mut TwoWire_consts_rxBufferIndex: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire14rxBufferLengthE"]
    pub static mut TwoWire_consts_rxBufferLength: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire9txAddressE"]
    pub static mut TwoWire_consts_txAddress: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire8txBufferE"]
    pub static mut TwoWire_consts_txBuffer: *mut ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire13txBufferIndexE"]
    pub static mut TwoWire_consts_txBufferIndex: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire14txBufferLengthE"]
    pub static mut TwoWire_consts_txBufferLength: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire12transmittingE"]
    pub static mut TwoWire_consts_transmitting: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire14user_onRequestE"]
    pub static mut TwoWire_consts_user_onRequest:
               ::std::option::Option<unsafe extern "C" fn()>;
    #[link_name = "_ZN7TwoWire14user_onReceiveE"]
    pub static mut TwoWire_consts_user_onReceive:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
    #[link_name = "_ZN7TwoWire11sda_pin_numE"]
    pub static mut TwoWire_consts_sda_pin_num: ::std::os::raw::c_uchar;
    #[link_name = "_ZN7TwoWire11scl_pin_numE"]
    pub static mut TwoWire_consts_scl_pin_num: ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TWBRemulation;
impl ::std::clone::Clone for TWBRemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub static mut _VectorsRam:
               [::std::option::Option<unsafe extern "C" fn()>; 111usize];
    pub static mut _VectorsFlash:
               [::std::option::Option<unsafe extern "C" fn()>; 111usize];
    pub static mut digital_pin_to_info_PGM:
               digital_pin_bitband_and_config_table_struct;
    pub static mut systick_millis_count: ::std::os::raw::c_uint;
    pub static mut Teensy3Clock: teensy3_clock_class;
    pub static mut Serial1: HardwareSerial;
    pub static mut Serial2: HardwareSerial2;
    pub static mut Serial3: HardwareSerial3;
    pub static mut Serial4: HardwareSerial4;
    pub static mut Serial5: HardwareSerial5;
    pub static mut Serial6: HardwareSerial6;
    pub static mut PORTD: PORTDemulation;
    pub static mut PIND: PINDemulation;
    pub static mut DDRD: DDRDemulation;
    pub static mut PORTB: PORTBemulation;
    pub static mut PINB: PINBemulation;
    pub static mut DDRB: DDRBemulation;
    pub static mut PORTC: PORTCemulation;
    pub static mut PINC: PINCemulation;
    pub static mut DDRC: DDRCemulation;
    pub static mut SPCR: SPCRemulation;
    pub static mut SPSR: SPSRemulation;
    pub static mut SPDR: SPDRemulation;
    pub static mut SREG: SREGemulation;
    pub static mut EIMSK: EIMSKemulation;
    pub static mut usb_cdc_line_coding: [::std::os::raw::c_uint; 2usize];
    pub static mut usb_cdc_line_rtsdtr_millis: ::std::os::raw::c_uint;
//    pub static mut systick_millis_count: ::std::os::raw::c_uint;
    pub static mut usb_cdc_line_rtsdtr: ::std::os::raw::c_uchar;
    pub static mut usb_cdc_transmit_flush_timer: ::std::os::raw::c_uchar;
    pub static mut usb_configuration: ::std::os::raw::c_uchar;
    pub static mut Serial: usb_serial_class;
    pub static mut keycodes_ascii: *const ::std::os::raw::c_uchar;
    pub static mut keycodes_iso_8859_1: *const ::std::os::raw::c_uchar;
    pub static mut SPI: SPIClass;
    pub static mut Wire: TwoWire;
    pub static mut TWBR: TWBRemulation;
}
extern "C" {
    pub fn eeprom_initialize();
    pub fn eeprom_read_byte(addr: *const u8) -> u8;
    pub fn eeprom_read_word(addr: *const u16) -> u16;
    pub fn eeprom_read_dword(addr: *const u32) -> u32;
    pub fn eeprom_read_block(buf: *mut ::std::os::raw::c_void,
                             addr: *const ::std::os::raw::c_void, len: u32);
    pub fn eeprom_write_byte(addr: *mut u8, value: u8);
    pub fn eeprom_write_word(addr: *mut u16, value: u16);
    pub fn eeprom_write_dword(addr: *mut u32, value: u32);
    pub fn eeprom_write_block(buf: *const ::std::os::raw::c_void,
                              addr: *mut ::std::os::raw::c_void, len: u32);
    pub fn eeprom_is_ready() -> ::std::os::raw::c_int;
    pub fn ultoa(val: ::std::os::raw::c_ulong,
                 buf: *mut ::std::os::raw::c_uchar,
                 radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
    pub fn ltoa(val: ::std::os::raw::c_long,
                buf: *mut ::std::os::raw::c_uchar,
                radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_uchar;
    pub fn dtostrf(val: f32, width: ::std::os::raw::c_int,
                   precision: ::std::os::raw::c_uint,
                   buf: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
    pub fn nvic_execution_priority() -> ::std::os::raw::c_int;
    pub fn nmi_isr();
    pub fn hard_fault_isr();
    pub fn memmanage_fault_isr();
    pub fn bus_fault_isr();
    pub fn usage_fault_isr();
    pub fn svcall_isr();
    pub fn debugmonitor_isr();
    pub fn pendablesrvreq_isr();
    pub fn systick_isr();
    pub fn dma_ch0_isr();
    pub fn dma_ch1_isr();
    pub fn dma_ch2_isr();
    pub fn dma_ch3_isr();
    pub fn dma_ch4_isr();
    pub fn dma_ch5_isr();
    pub fn dma_ch6_isr();
    pub fn dma_ch7_isr();
    pub fn dma_ch8_isr();
    pub fn dma_ch9_isr();
    pub fn dma_ch10_isr();
    pub fn dma_ch11_isr();
    pub fn dma_ch12_isr();
    pub fn dma_ch13_isr();
    pub fn dma_ch14_isr();
    pub fn dma_ch15_isr();
    pub fn dma_error_isr();
    pub fn mcm_isr();
    pub fn randnum_isr();
    pub fn flash_cmd_isr();
    pub fn flash_error_isr();
    pub fn low_voltage_isr();
    pub fn wakeup_isr();
    pub fn watchdog_isr();
    pub fn i2c0_isr();
    pub fn i2c1_isr();
    pub fn i2c2_isr();
    pub fn i2c3_isr();
    pub fn spi0_isr();
    pub fn spi1_isr();
    pub fn spi2_isr();
    pub fn sdhc_isr();
    pub fn enet_timer_isr();
    pub fn enet_tx_isr();
    pub fn enet_rx_isr();
    pub fn enet_error_isr();
    pub fn can0_message_isr();
    pub fn can0_bus_off_isr();
    pub fn can0_error_isr();
    pub fn can0_tx_warn_isr();
    pub fn can0_rx_warn_isr();
    pub fn can0_wakeup_isr();
    pub fn can1_message_isr();
    pub fn can1_bus_off_isr();
    pub fn can1_error_isr();
    pub fn can1_tx_warn_isr();
    pub fn can1_rx_warn_isr();
    pub fn can1_wakeup_isr();
    pub fn i2s0_tx_isr();
    pub fn i2s0_rx_isr();
    pub fn i2s0_isr();
    pub fn uart0_lon_isr();
    pub fn uart0_status_isr();
    pub fn uart0_error_isr();
    pub fn uart1_status_isr();
    pub fn uart1_error_isr();
    pub fn uart2_status_isr();
    pub fn uart2_error_isr();
    pub fn uart3_status_isr();
    pub fn uart3_error_isr();
    pub fn uart4_status_isr();
    pub fn uart4_error_isr();
    pub fn uart5_status_isr();
    pub fn uart5_error_isr();
    pub fn lpuart0_status_isr();
    pub fn adc0_isr();
    pub fn adc1_isr();
    pub fn cmp0_isr();
    pub fn cmp1_isr();
    pub fn cmp2_isr();
    pub fn cmp3_isr();
    pub fn ftm0_isr();
    pub fn ftm1_isr();
    pub fn ftm2_isr();
    pub fn ftm3_isr();
    pub fn tpm0_isr();
    pub fn tpm1_isr();
    pub fn tpm2_isr();
    pub fn cmt_isr();
    pub fn rtc_alarm_isr();
    pub fn rtc_seconds_isr();
    pub fn pit0_isr();
    pub fn pit1_isr();
    pub fn pit2_isr();
    pub fn pit3_isr();
    pub fn pit_isr();
    pub fn pdb_isr();
    pub fn usb_isr();
    pub fn usb_charge_isr();
    pub fn usbhs_isr();
    pub fn usbhs_phy_isr();
    pub fn dac0_isr();
    pub fn dac1_isr();
    pub fn tsi0_isr();
    pub fn mcg_isr();
    pub fn lptmr_isr();
    pub fn porta_isr();
    pub fn portb_isr();
    pub fn portc_isr();
    pub fn portd_isr();
    pub fn porte_isr();
    pub fn portcd_isr();
    pub fn software_isr();
    pub fn digitalWrite(pin: u8, val: u8);
    pub fn digitalRead(pin: u8) -> u8;
    pub fn pinMode(pin: u8, mode: u8);
    pub fn init_pins();
    pub fn analogWrite(pin: u8, val: ::std::os::raw::c_int);
    pub fn analogWriteRes(bits: u32);
    pub fn analogWriteFrequency(pin: u8, frequency: f32);
    pub fn analogWriteDAC0(val: ::std::os::raw::c_int);
    pub fn analogWriteDAC1(val: ::std::os::raw::c_int);
    pub fn attachInterruptVector(irq: IRQ_NUMBER_t,
                                 function:
                                     ::std::option::Option<unsafe extern "C" fn()>);
    pub fn attachInterrupt(pin: u8,
                           function:
                               ::std::option::Option<unsafe extern "C" fn()>,
                           mode: ::std::os::raw::c_int);
    pub fn detachInterrupt(pin: u8);
    pub fn _init_Teensyduino_internal_();
    pub fn analogRead(pin: u8) -> ::std::os::raw::c_int;
    pub fn analogReference(type_: u8);
    pub fn analogReadRes(bits: ::std::os::raw::c_uint);
    pub fn analogReadAveraging(num: ::std::os::raw::c_uint);
    pub fn analog_init();
    pub fn touchRead(pin: u8) -> ::std::os::raw::c_int;
    pub fn _shiftOut(dataPin: u8, clockPin: u8, bitOrder: u8, value: u8);
    pub fn shiftOut_lsbFirst(dataPin: u8, clockPin: u8, value: u8);
    pub fn shiftOut_msbFirst(dataPin: u8, clockPin: u8, value: u8);
    pub fn _shiftIn(dataPin: u8, clockPin: u8, bitOrder: u8) -> u8;
    pub fn shiftIn_lsbFirst(dataPin: u8, clockPin: u8) -> u8;
    pub fn shiftIn_msbFirst(dataPin: u8, clockPin: u8) -> u8;
    pub fn _reboot_Teensyduino_();
    pub fn _restart_Teensyduino_();
    #[link_name = "yield"]
    pub fn yield_();
    pub fn delay(msec: u32);
    pub fn micros() -> u32;
    pub fn rtc_get() -> ::std::os::raw::c_ulong;
    pub fn rtc_set(t: ::std::os::raw::c_ulong);
    pub fn rtc_compensate(adjust: ::std::os::raw::c_int);
    pub fn pulseIn(pin: u8, state: u8, timeout: u32) -> u32;
    pub fn setup();
    #[link_name = "loop"]
    pub fn loop_();
    pub fn serial_begin(divisor: u32);
    pub fn serial_format(format: u32);
    pub fn serial_end();
    pub fn serial_set_transmit_pin(pin: u8);
    pub fn serial_set_rx(pin: u8);
    pub fn serial_set_tx(pin: u8, opendrain: u8);
    pub fn serial_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial_putchar(c: u32);
    pub fn serial_write(buf: *const ::std::os::raw::c_void,
                        count: ::std::os::raw::c_uint);
    pub fn serial_flush();
    pub fn serial_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial_available() -> ::std::os::raw::c_int;
    pub fn serial_getchar() -> ::std::os::raw::c_int;
    pub fn serial_peek() -> ::std::os::raw::c_int;
    pub fn serial_clear();
    pub fn serial_print(p: *const ::std::os::raw::c_uchar);
    pub fn serial_phex(n: u32);
    pub fn serial_phex16(n: u32);
    pub fn serial_phex32(n: u32);
    pub fn serial2_begin(divisor: u32);
    pub fn serial2_format(format: u32);
    pub fn serial2_end();
    pub fn serial2_set_transmit_pin(pin: u8);
    pub fn serial2_set_rx(pin: u8);
    pub fn serial2_set_tx(pin: u8, opendrain: u8);
    pub fn serial2_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial2_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial2_putchar(c: u32);
    pub fn serial2_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
    pub fn serial2_flush();
    pub fn serial2_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial2_available() -> ::std::os::raw::c_int;
    pub fn serial2_getchar() -> ::std::os::raw::c_int;
    pub fn serial2_peek() -> ::std::os::raw::c_int;
    pub fn serial2_clear();
    pub fn serial3_begin(divisor: u32);
    pub fn serial3_format(format: u32);
    pub fn serial3_end();
    pub fn serial3_set_transmit_pin(pin: u8);
    pub fn serial3_set_rx(pin: u8);
    pub fn serial3_set_tx(pin: u8, opendrain: u8);
    pub fn serial3_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial3_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial3_putchar(c: u32);
    pub fn serial3_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
    pub fn serial3_flush();
    pub fn serial3_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial3_available() -> ::std::os::raw::c_int;
    pub fn serial3_getchar() -> ::std::os::raw::c_int;
    pub fn serial3_peek() -> ::std::os::raw::c_int;
    pub fn serial3_clear();
    pub fn serial4_begin(divisor: u32);
    pub fn serial4_format(format: u32);
    pub fn serial4_end();
    pub fn serial4_set_transmit_pin(pin: u8);
    pub fn serial4_set_rx(pin: u8);
    pub fn serial4_set_tx(pin: u8, opendrain: u8);
    pub fn serial4_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial4_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial4_putchar(c: u32);
    pub fn serial4_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
    pub fn serial4_flush();
    pub fn serial4_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial4_available() -> ::std::os::raw::c_int;
    pub fn serial4_getchar() -> ::std::os::raw::c_int;
    pub fn serial4_peek() -> ::std::os::raw::c_int;
    pub fn serial4_clear();
    pub fn serial5_begin(divisor: u32);
    pub fn serial5_format(format: u32);
    pub fn serial5_end();
    pub fn serial5_set_transmit_pin(pin: u8);
    pub fn serial5_set_rx(pin: u8);
    pub fn serial5_set_tx(pin: u8, opendrain: u8);
    pub fn serial5_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial5_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial5_putchar(c: u32);
    pub fn serial5_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
    pub fn serial5_flush();
    pub fn serial5_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial5_available() -> ::std::os::raw::c_int;
    pub fn serial5_getchar() -> ::std::os::raw::c_int;
    pub fn serial5_peek() -> ::std::os::raw::c_int;
    pub fn serial5_clear();
    pub fn serial6_begin(divisor: u32);
    pub fn serial6_format(format: u32);
    pub fn serial6_end();
    pub fn serial6_set_transmit_pin(pin: u8);
    pub fn serial6_set_rx(pin: u8);
    pub fn serial6_set_tx(pin: u8, opendrain: u8);
    pub fn serial6_set_rts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial6_set_cts(pin: u8) -> ::std::os::raw::c_int;
    pub fn serial6_putchar(c: u32);
    pub fn serial6_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
    pub fn serial6_flush();
    pub fn serial6_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn serial6_available() -> ::std::os::raw::c_int;
    pub fn serial6_getchar() -> ::std::os::raw::c_int;
    pub fn serial6_peek() -> ::std::os::raw::c_int;
    pub fn serial6_clear();
    pub fn __cxa_guard_acquire(arg1: *mut __guard) -> ::std::os::raw::c_int;
    pub fn __cxa_guard_release(arg1: *mut __guard);
    pub fn __cxa_guard_abort(arg1: *mut __guard);
    pub fn __cxa_pure_virtual();
    #[link_name = "_Z12serialEvent1v"]
    pub fn serialEvent1();
    #[link_name = "_Z12serialEvent2v"]
    pub fn serialEvent2();
    #[link_name = "_Z12serialEvent3v"]
    pub fn serialEvent3();
    #[link_name = "_Z12serialEvent4v"]
    pub fn serialEvent4();
    #[link_name = "_Z12serialEvent5v"]
    pub fn serialEvent5();
    #[link_name = "_Z12serialEvent6v"]
    pub fn serialEvent6();
    pub fn usb_serial_getchar() -> ::std::os::raw::c_int;
    pub fn usb_serial_peekchar() -> ::std::os::raw::c_int;
    pub fn usb_serial_available() -> ::std::os::raw::c_int;
    pub fn usb_serial_read(buffer: *mut ::std::os::raw::c_void, size: u32)
     -> ::std::os::raw::c_int;
    pub fn usb_serial_flush_input();
    pub fn usb_serial_putchar(c: u8) -> ::std::os::raw::c_int;
    pub fn usb_serial_write(buffer: *const ::std::os::raw::c_void, size: u32)
     -> ::std::os::raw::c_int;
    pub fn usb_serial_write_buffer_free() -> ::std::os::raw::c_int;
    pub fn usb_serial_flush_output();
    #[link_name = "_Z11serialEventv"]
    pub fn serialEvent();
    #[link_name = "_Z14isAlphaNumerici"]
    pub fn isAlphaNumeric(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isAlphai"]
    pub fn isAlpha(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isAsciii"]
    pub fn isAscii(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z12isWhitespacei"]
    pub fn isWhitespace(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z9isControli"]
    pub fn isControl(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isDigiti"]
    pub fn isDigit(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isGraphi"]
    pub fn isGraph(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z11isLowerCasei"]
    pub fn isLowerCase(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z11isPrintablei"]
    pub fn isPrintable(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isPuncti"]
    pub fn isPunct(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7isSpacei"]
    pub fn isSpace(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z11isUpperCasei"]
    pub fn isUpperCase(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z18isHexadecimalDigiti"]
    pub fn isHexadecimalDigit(c: ::std::os::raw::c_int) -> boolean;
    #[link_name = "_Z7toAsciii"]
    pub fn toAscii(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "_Z11toLowerCasei"]
    pub fn toLowerCase(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "_Z11toUpperCasei"]
    pub fn toUpperCase(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "_Z8makeWordt"]
    pub fn makeWord(w: u16) -> u16;
    #[link_name = "_Z8makeWordhh"]
    pub fn makeWord1(h: byte, l: byte) -> u16;
    #[link_name = "_Z7pulseInhhm"]
    pub fn pulseIn1(pin: u8, state: u8, timeout: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    #[link_name = "_Z4tonehtj"]
    pub fn tone(pin: u8, frequency: u16, duration: u32);
    #[link_name = "_Z6noToneh"]
    pub fn noTone(pin: u8);
    pub fn random() -> ::std::os::raw::c_long;
    #[link_name = "_Z6randomj"]
    pub fn random1(howbig: u32) -> ::std::os::raw::c_long;
    #[link_name = "_Z6randomii"]
    pub fn random2(howsmall: i32, howbig: i32) -> ::std::os::raw::c_long;
    #[link_name = "_Z10randomSeedj"]
    pub fn randomSeed(newseed: u32);
    pub fn srandom(newseed: u32);
    #[link_name = "_Z3maplllll"]
    pub fn map(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long,
               arg3: ::std::os::raw::c_long, arg4: ::std::os::raw::c_long,
               arg5: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn memcpy(dst: *mut ::std::os::raw::c_void,
                  src: *const ::std::os::raw::c_void, count: usize)
     -> *mut ::std::os::raw::c_void;
    pub fn i2c0_isr1();
}
